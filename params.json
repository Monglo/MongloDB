{"note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Monglodb","tagline":"Portable Pure JS MongoDB With Extra Awesomeness","body":"![MongoDB](https://github.com/Monglo/monglo.github.com/raw/master/images/logo.png)\r\n\r\nPortable Pure JS MongoDB With Extra Awesomeness\r\n\r\nVersion 0.1.4\r\n\r\n##Breaking API Changes*\r\n - Collection methods\r\n   - Return result via callback see below docs for examples\r\n\r\n## Status: (Stable)\r\n - See TODO\r\n - Pull requests are always welcome\r\n\r\n## Features\r\n - MongoDB style queries\r\n - Persistence for Collections\r\n - Data Persistence Plug-in system\r\n\r\n## TODO\r\n  - Finish Docs\r\n  - Add more datastores\r\n  - Add remaining functions\r\n  - Code/function Clean up and optimization\r\n\r\n\r\n## Building\r\n\r\n```\r\n$ git clone https://github.com/euforic/monglodb.git\r\n$ cd monglodb\r\n$ npm install -d\r\n$ make clean && make\r\n```\r\nBuilds will be located in __dist__ folder\r\n\r\n\r\n\r\n### initilize\r\n\r\n```js\r\nvar Monglo = require('monglo').Monglo;\r\nvar db = Monglo('DBNAME');\r\n```\r\n\r\n## DataStore\r\nDatastores for persistence your db with local/remote data\r\n```\r\nvar monglo = require('./index').Monglo;\r\nvar db = monglo('DemoDB');\r\n\r\n//Define a store locally or import a common js module;\r\n//See source for all available functions\r\nfunction DemoStore(){\r\n  return {\r\n    insert : function(args){  },\r\n    update : function(args){  },\r\n    open   : function(args){  },\r\n    remove : function(args){  },\r\n       all : function(args){  }\r\n  };\r\n}\r\n//Load the store in Monglo\r\ndb.use('store', new DemoStore());\r\n```\r\n\r\n### find\r\nFind all docs that match query parameters\r\n```js\r\ndb.someCollection.find({}, function ( error, cursor ){ });\r\n```\r\n\r\n### findOne\r\nFind a single doc that matches query parameters\r\n\r\n```js\r\ndb.someCollection.findOne({}, function ( error, doc ){ });\r\n```\r\n\r\n### insert\r\nInsert a new doc\r\n\r\n```js\r\ndb.someCollection.insert({text: \"Hello, world!\"}, function ( error, doc ){ });\r\n```\r\n\r\n### update\r\nUpdate and existing doc\r\n\r\n```js\r\ndb.someCollection.update({name:'tester'}, {$set: {text: 'test'}}, function ( err, doc ){ });\r\n```\r\n\r\n### save\r\nUpdate doc if exists if not insert the new doc\r\n\r\n```js\r\ndb.someCollection.save({DOC}, function ( err, doc ){ });\r\n```\r\n\r\n### remove\r\nRemove the doc matching the query selector\r\n\r\n```js\r\ndb.someCollection.remove({uid:'34245'}, function (err) { });\r\n```\r\n\r\n### backup\r\nSaves snapshot of collection's current state in memory\r\nBackup ID defaults to a new ObjectID string if non is provided\r\n\r\n```js\r\ndb.someCollection.backup('backuId_1234', function (err) { });\r\n```\r\n\r\n### restore\r\nRestore the state of a collection from backup\r\n\r\n```js\r\ndb.someCollection.restore('backuId_1234', function (err) { });\r\n```\r\n\r\n### backups\r\nLists available Backups\r\n\r\n```js\r\ndb.someCollection.backups(function (err) { });\r\n```\r\n\r\n### removeBackup\r\nRemove a backup from memory.\r\nIf backup id is left empty all backups will be removed;\r\n\r\n```js\r\ndb.someCollection.removeBackup('backuId_1234', function (err) { });\r\n```\r\n\r\n## Cursors\r\n\r\nTo create a cursor, use find. To access the documents in a cursor, use forEach, map, or fetch.\r\n\r\n```js\r\ndb.someCollection.find({}, function (err, cursor) {\r\n  // Cursor instance for query\r\n});\r\n```\r\n\r\n### forEach\r\nCall the callback function once for each matching document.\r\n\r\n```js\r\nsomeCursor.forEach(function(doc){ console.log(doc); });\r\n```\r\n\r\n### map\r\nMap callback over all matching documents. Returns an Array.\r\n\r\n```js\r\nsomeCursor.map(function(doc){\r\n  doc.fullname = doc.firstname+' '+doc.lastname;\r\n  return doc;\r\n});\r\n```\r\n\r\n### fetch\r\nReturn all matching documents as an Array.\r\n\r\n```js\r\nsomeCursor.fetch(function(docs){ console.log(docs); });\r\n```\r\n\r\n### count\r\nReturns the number of documents that match a query.\r\n\r\n```js\r\nsomeCursor.count();\r\n```\r\n\r\n### rewind\r\nResets the query cursor.\r\n\r\n```js\r\nsomeCursor.rewind();\r\n```\r\n\r\n### Events\r\nWatch a query. Receive callbacks as the result set changes.\r\n\r\n```js\r\nMonglo.Collection('my_collection');\r\nvar someCollection = db.someCollection('mycollection');\r\n\r\n//See docs for all events\r\nsomeCollection.on('insert', function(){ /** Do something  **/ });\r\nsomeCollection.on('update', function(){ /** Do something  **/ });\r\nsomeCollection.on('remove', function(){ /** Do something  **/ });\r\nsomeCollection.on('find', function(){ /** Do something  **/ });\r\nsomeCollection.on('createCollection', function(){ /** Do something  **/ });\r\nsomeCollection.on('removeCollection', function(){ /** Do something  **/ });\r\n```\r\n\r\n## License\r\n\r\n(The MIT License)\r\n\r\nCopyright (c) 2012 Christian Sullivan &lt;cs@euforic.co&gt;\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining\r\na copy of this software and associated documentation files (the\r\n'Software'), to deal in the Software without restriction, including\r\nwithout limitation the rights to use, copy, modify, merge, publish,\r\ndistribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to\r\nthe following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be\r\nincluded in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","google":""}