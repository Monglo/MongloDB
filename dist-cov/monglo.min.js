/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['monglo.min.js']) {
  _$jscoverage['monglo.min.js'] = [];
  _$jscoverage['monglo.min.js'][6] = 0;
  _$jscoverage['monglo.min.js'][7] = 0;
}
_$jscoverage['monglo.min.js'][6]++;
function Collection(db, collectionName, pkFactory, options) {
  _$jscoverage['monglo.min.js'][6]++;
  if (! (this instanceof Collection)) {
    _$jscoverage['monglo.min.js'][6]++;
    return new Collection(db, collectionName, pkFactory, options);
  }
  _$jscoverage['monglo.min.js'][6]++;
  checkCollectionName(collectionName), this.db = db, this.collectionName = collectionName, this.docs = {}, this.snapshots = [], this.opts = options != null && "object" == typeof options? options: {};
  _$jscoverage['monglo.min.js'][6]++;
  var self = this;
}
_$jscoverage['monglo.min.js'][6]++;
function Cursor(db, collection, selector, fields, skip, limit, sort) {
  _$jscoverage['monglo.min.js'][6]++;
  this.db = db, this.collection = collection, this.selector = selector, this.fields = fields, this.skipValue = skip === null? 0: skip, this.limitValue = limit === null? 0: limit, this.sortValue = sort, typeof this.selector == "string" || typeof this.selector == "number"? (this.selector_id = this.selector, this.selector_f = Selector._compileSelector(this.selector)): (this.selector_f = Selector._compileSelector(this.selector), this.sort_f = this.sortValue? Collection._compileSort(this.sortValue): null), this.db_objects = null, this.cursor_pos = 0;
}
_$jscoverage['monglo.min.js'][6]++;
function validateDatabaseName(databaseName) {
  _$jscoverage['monglo.min.js'][6]++;
  if (typeof databaseName != "string") {
    _$jscoverage['monglo.min.js'][6]++;
    throw new Error("database name must be a string");
  }
  _$jscoverage['monglo.min.js'][6]++;
  if (databaseName.length === 0) {
    _$jscoverage['monglo.min.js'][6]++;
    throw new Error("database name cannot be the empty string");
  }
  _$jscoverage['monglo.min.js'][6]++;
  var invalidChars = [" ", ".", "$", "/", "\\"];
  _$jscoverage['monglo.min.js'][6]++;
  for (var i = 0; i < invalidChars.length; i++) {
    _$jscoverage['monglo.min.js'][6]++;
    if (databaseName.indexOf(invalidChars[i]) != -1) {
      _$jscoverage['monglo.min.js'][6]++;
      throw new Error("database names cannot contain the character '" + invalidChars[i] + "'");
    }
}
}
_$jscoverage['monglo.min.js'][6]++;
function BinaryParser(bigEndian, allowExceptions) {
  _$jscoverage['monglo.min.js'][6]++;
  if (! (this instanceof BinaryParser)) {
    _$jscoverage['monglo.min.js'][6]++;
    return new BinaryParser(bigEndian, allowExceptions);
  }
  _$jscoverage['monglo.min.js'][6]++;
  this.bigEndian = bigEndian, this.allowExceptions = allowExceptions;
}
_$jscoverage['monglo.min.js'][6]++;
function BinaryParserBuffer(bigEndian, buffer) {
  _$jscoverage['monglo.min.js'][6]++;
  this.bigEndian = bigEndian || 0, this.buffer = [], this.setBuffer(buffer);
}
_$jscoverage['monglo.min.js'][6]++;
function EventEmitter() {
}
_$jscoverage['monglo.min.js'][6]++;
Collection.prototype.__proto__ = EventEmitter.prototype, Collection.prototype.constructor = Collection;
_$jscoverage['monglo.min.js'][6]++;
var testForFields = {limit: 1, sort: 1, fields: 1, skip: 1, hint: 1, explain: 1, snapshot: 1, timeout: 1, tailable: 1, batchSize: 1, raw: 1, read: 1, returnKey: 1, maxScan: 1, min: 1, max: 1, showDiskLoc: 1, comment: 1, dbName: 1, exhaust: 1, tailableRetryInterval: 1};
_$jscoverage['monglo.min.js'][6]++;
Collection.prototype.find = (function () {
  _$jscoverage['monglo.min.js'][6]++;
  var self = this, options, args = Array.prototype.slice.call(arguments, 0), has_callback = typeof args[args.length - 1] == "function", has_weird_callback = typeof args[0] == "function", callback = has_callback? args.pop(): has_weird_callback? args.shift(): null, len = args.length, selector = len >= 1? args[0]: {}, fields = len >= 2? args[1]: undefined;
  _$jscoverage['monglo.min.js'][6]++;
  len === 1 && has_weird_callback && (selector = {}, options = args[0]);
  _$jscoverage['monglo.min.js'][6]++;
  if (len === 2 && ! utils.isArray(fields)) {
    _$jscoverage['monglo.min.js'][6]++;
    var fieldKeys = Object.getOwnPropertyNames(fields), is_option = false;
    _$jscoverage['monglo.min.js'][6]++;
    for (var i = 0; i < fieldKeys.length; i++) {
      _$jscoverage['monglo.min.js'][6]++;
      if (testForFields[fieldKeys[i]] != null) {
        _$jscoverage['monglo.min.js'][6]++;
        is_option = true;
        _$jscoverage['monglo.min.js'][6]++;
        break;
      }
}
    _$jscoverage['monglo.min.js'][6]++;
    is_option? (options = fields, fields = undefined): options = {};
  }
  else {
    _$jscoverage['monglo.min.js'][6]++;
    if (len === 2 && utils.isArray(fields) && ! utils.isArray(fields[0])) {
      _$jscoverage['monglo.min.js'][6]++;
      var newFields = {};
      _$jscoverage['monglo.min.js'][6]++;
      for (var i = 0; i < fields.length; i++) {
        _$jscoverage['monglo.min.js'][6]++;
        newFields[fields[i]] = 1;
}
      _$jscoverage['monglo.min.js'][6]++;
      fields = newFields;
    }
  }
  _$jscoverage['monglo.min.js'][6]++;
  3 === len && (options = args[2]), selector = selector == null? {}: selector;
  _$jscoverage['monglo.min.js'][6]++;
  var object = selector, object = fields;
  _$jscoverage['monglo.min.js'][6]++;
  selector instanceof ObjectID && (selector = {_id: selector});
  _$jscoverage['monglo.min.js'][6]++;
  if (options && options.fields) {
    _$jscoverage['monglo.min.js'][6]++;
    fields = {};
    _$jscoverage['monglo.min.js'][6]++;
    if (utils.isArray(options.fields)) {
      _$jscoverage['monglo.min.js'][6]++;
      if (! options.fields.length) {
        _$jscoverage['monglo.min.js'][6]++;
        fields._id = 1;
      }
      else {
        _$jscoverage['monglo.min.js'][6]++;
        for (var i = 0, l = options.fields.length; i < l; i++) {
          _$jscoverage['monglo.min.js'][6]++;
          fields[options.fields[i]] = 1;
}
      }
    }
    else {
      _$jscoverage['monglo.min.js'][6]++;
      fields = options.fields;
    }
  }
  _$jscoverage['monglo.min.js'][6]++;
  options || (options = {}), options.skip = len > 3? args[2]: options.skip? options.skip: 0, options.limit = len > 3? args[3]: options.limit? options.limit: 0;
  _$jscoverage['monglo.min.js'][6]++;
  var o = options, cursor = new Cursor(this.db, this, selector, fields, o.skip, o.limit, o.sort);
  _$jscoverage['monglo.min.js'][6]++;
  return this.emit("find", selector, cursor, o), this.db._executeCommand("find", {conn: self.db, selector: selector, options: o}), callback? callback(cursor): cursor;
}), Collection.prototype.findOne = (function (selector, options) {
  _$jscoverage['monglo.min.js'][6]++;
  return arguments.length === 0 && (selector = {}), this.find(selector).fetch()[0];
}), Collection.prototype.insert = (function (doc, options, cb) {
  _$jscoverage['monglo.min.js'][6]++;
  var self = this;
  _$jscoverage['monglo.min.js'][6]++;
  "function" == typeof options && (cb = options, options = {}), options = options || {}, doc = utils._deepcopy(doc), "_id" in doc || (doc._id = new ObjectId()), doc.timestamp = (new ObjectId()).generationTime, self.docs[doc._id] = doc;
  _$jscoverage['monglo.min.js'][6]++;
  for (var qid in self.queries) {
    _$jscoverage['monglo.min.js'][6]++;
    var query = self.queries[qid];
    _$jscoverage['monglo.min.js'][6]++;
    query.selector_f(doc) && Collection._insertInResults(query, doc);
}
  _$jscoverage['monglo.min.js'][6]++;
  return options.ignore? cb? cb(doc): doc: (self.emit("insert", doc), this.db._executeCommand("insert", {conn: self.db, collection: self, doc: self.docs[doc._id]}), cb? cb(doc): doc);
}), Collection.prototype.remove = (function (selector) {
  _$jscoverage['monglo.min.js'][6]++;
  var self = this, remove = [], query_remove = [], selector_f = Selector._compileSelector(selector);
  _$jscoverage['monglo.min.js'][6]++;
  for (var id in self.docs) {
    _$jscoverage['monglo.min.js'][6]++;
    var doc = self.docs[id];
    _$jscoverage['monglo.min.js'][6]++;
    selector_f(doc) && remove.push(id);
}
  _$jscoverage['monglo.min.js'][6]++;
  for (var i = 0; i < remove.length; i++) {
    _$jscoverage['monglo.min.js'][6]++;
    delete self.docs[remove[i]];
}
  _$jscoverage['monglo.min.js'][6]++;
  return self.emit("remove", selector), this.db._executeCommand("remove", {conn: self.db, selector: selector, docs: remove}), this;
}), Collection.prototype.update = (function (selector, mod, options, cb) {
  _$jscoverage['monglo.min.js'][6]++;
  var self = this;
  _$jscoverage['monglo.min.js'][6]++;
  "function" == typeof options && (cb = options, options = {}), options = options || {};
  _$jscoverage['monglo.min.js'][6]++;
  var self = this, any = false, updatedDocs = [], selector_f = Selector._compileSelector(selector);
  _$jscoverage['monglo.min.js'][6]++;
  for (var id in self.docs) {
    _$jscoverage['monglo.min.js'][6]++;
    var doc = self.docs[id];
    _$jscoverage['monglo.min.js'][6]++;
    if (selector_f(doc)) {
      _$jscoverage['monglo.min.js'][6]++;
      updatedDocs.push(doc), Collection._modify(doc, mod);
      _$jscoverage['monglo.min.js'][6]++;
      if (! options.multi) {
        _$jscoverage['monglo.min.js'][6]++;
        return any = true, self.emit("update", selector, mod, options), self.db._executeCommand("update", {conn: self.db, selector: selector, modifier: mod, options: options, docs: updatedDocs}), cb? cb(self.docs[id]): self.docs[id];
      }
    }
}
  _$jscoverage['monglo.min.js'][6]++;
  if (options.upsert) {
    _$jscoverage['monglo.min.js'][6]++;
    throw new Error("upsert not yet implemented");
  }
  _$jscoverage['monglo.min.js'][6]++;
  options.upsert && ! any && (insert = utils._deepcopy(selector), Collection._modify(insert, mod), self.insert(insert, {ignore: true}));
  _$jscoverage['monglo.min.js'][6]++;
  var newDoc = self.find(selector).fetch();
  _$jscoverage['monglo.min.js'][6]++;
  return self.emit("update", selector, mod, options), self.db._executeCommand("update", {conn: self.db, selector: selector, modifier: mod, options: options, docs: newDoc}), cb? cb(newDoc): newDoc;
}), Collection.prototype.save = (function (obj, cb) {
  _$jscoverage['monglo.min.js'][6]++;
  var self = this;
  _$jscoverage['monglo.min.js'][6]++;
  self.docs[obj._id]? self.update({_id: obj._id}): self.insert(obj);
}), Collection.prototype.ensureIndex = (function () {
  _$jscoverage['monglo.min.js'][6]++;
  throw new Error("Collection#ensureIndex unimplemented by driver");
}), Collection.prototype.backup = (function () {
  _$jscoverage['monglo.min.js'][6]++;
  var snapID = new ObjectId();
  _$jscoverage['monglo.min.js'][6]++;
  this.snapshots[snapID] = {};
  _$jscoverage['monglo.min.js'][6]++;
  for (var id in this.docs) {
    _$jscoverage['monglo.min.js'][6]++;
    this.snapshots[snapID][id] = this.docs[id];
}
  _$jscoverage['monglo.min.js'][6]++;
  this.stores.snapshot({_id: this.docs[id], data: this.docs[id]}), this.emit("snapshot", {_id: this.docs[id], data: this.docs[id]});
}), Collection.prototype.backups = (function () {
  _$jscoverage['monglo.min.js'][6]++;
  var keys = [];
  _$jscoverage['monglo.min.js'][6]++;
  for (var k in obj) {
    _$jscoverage['monglo.min.js'][6]++;
    keys.push({id: k, timestamp: ObjectId.hexToTimestamp(k), data: obj[k]});
}
  _$jscoverage['monglo.min.js'][6]++;
  return keys;
}), Collection.prototype.deleteBackup = (function (id) {
  _$jscoverage['monglo.min.js'][6]++;
  return delete this.snapshots[id], keys;
}), Collection.prototype.restore = (function (id, rm, cb) {
  _$jscoverage['monglo.min.js'][6]++;
  if (! this.snapshots.length) {
    _$jscoverage['monglo.min.js'][6]++;
    throw new Error("No current snapshot");
  }
  _$jscoverage['monglo.min.js'][6]++;
  "function" == typeof rm && (cb = rm, rm = false), this.docs = this.snapshots[id || 0];
  _$jscoverage['monglo.min.js'][6]++;
  for (var qid in this.queries) {
    _$jscoverage['monglo.min.js'][6]++;
    var query = this.queries[qid], old_results = query.results;
    _$jscoverage['monglo.min.js'][6]++;
    query.results = query.cursor._getRawObjects(), this.paused || Collection._diffQuery(old_results, query.results, query, true);
}
  _$jscoverage['monglo.min.js'][6]++;
  this.emit("restore");
  _$jscoverage['monglo.min.js'][6]++;
  if (cb) {
    _$jscoverage['monglo.min.js'][6]++;
    return cb();
  }
});
_$jscoverage['monglo.min.js'][6]++;
var checkCollectionName = (function checkCollectionName(collectionName) {
  _$jscoverage['monglo.min.js'][6]++;
  if ("string" != typeof collectionName) {
    _$jscoverage['monglo.min.js'][6]++;
    throw Error("collection name must be a String");
  }
  _$jscoverage['monglo.min.js'][6]++;
  if (! collectionName || collectionName.indexOf("..") != -1) {
    _$jscoverage['monglo.min.js'][6]++;
    throw Error("collection names cannot be empty");
  }
  _$jscoverage['monglo.min.js'][6]++;
  if (collectionName.indexOf("$") != -1 && collectionName.match(/((^\$cmd)|(oplog\.\$main))/) == null) {
    _$jscoverage['monglo.min.js'][6]++;
    throw Error("collection names must not contain '$'");
  }
  _$jscoverage['monglo.min.js'][6]++;
  if (collectionName.match(/^\.|\.$/) != null) {
    _$jscoverage['monglo.min.js'][6]++;
    throw Error("collection names must not start or end with '.'");
  }
});
_$jscoverage['monglo.min.js'][6]++;
Cursor.prototype.rewind = (function () {
  _$jscoverage['monglo.min.js'][6]++;
  var self = this;
  _$jscoverage['monglo.min.js'][6]++;
  self.db_objects = null, self.cursor_pos = 0;
}), Cursor.prototype.forEach = (function (callback) {
  _$jscoverage['monglo.min.js'][6]++;
  var self = this, doc;
  _$jscoverage['monglo.min.js'][6]++;
  self.db_objects === null && (self.db_objects = self._getRawObjects());
  _$jscoverage['monglo.min.js'][6]++;
  while (self.cursor_pos < self.db_objects.length) {
    _$jscoverage['monglo.min.js'][6]++;
    callback(utils._deepcopy(self.db_objects[self.cursor_pos++]));
}
}), Cursor.prototype.map = (function (callback) {
  _$jscoverage['monglo.min.js'][6]++;
  var self = this, res = [];
  _$jscoverage['monglo.min.js'][6]++;
  return self.forEach((function (doc) {
  _$jscoverage['monglo.min.js'][6]++;
  res.push(callback(doc));
})), res;
}), Cursor.prototype.fetch = (function () {
  _$jscoverage['monglo.min.js'][6]++;
  var self = this, res = [];
  _$jscoverage['monglo.min.js'][6]++;
  return self.forEach((function (doc) {
  _$jscoverage['monglo.min.js'][6]++;
  res.push(doc);
})), res;
}), Cursor.prototype.count = (function () {
  _$jscoverage['monglo.min.js'][6]++;
  var self = this;
  _$jscoverage['monglo.min.js'][6]++;
  return self.db_objects === null && (self.db_objects = self._getRawObjects()), self.db_objects.length;
}), Cursor.prototype.sort = (function () {
}), Cursor.prototype.limit = (function () {
}), Cursor.prototype._getRawObjects = (function () {
  _$jscoverage['monglo.min.js'][6]++;
  var self = this;
  _$jscoverage['monglo.min.js'][6]++;
  if (self.selector_id && self.selector_id in self.collection.docs) {
    _$jscoverage['monglo.min.js'][6]++;
    return [self.collection.docs[self.selector_id]];
  }
  _$jscoverage['monglo.min.js'][6]++;
  var results = [];
  _$jscoverage['monglo.min.js'][6]++;
  for (var id in self.collection.docs) {
    _$jscoverage['monglo.min.js'][6]++;
    var doc = self.collection.docs[id];
    _$jscoverage['monglo.min.js'][6]++;
    self.selector_f(doc) && results.push(doc);
}
  _$jscoverage['monglo.min.js'][6]++;
  self.sort_f && results.sort(self.sort_f);
  _$jscoverage['monglo.min.js'][6]++;
  var idx_start = self.skipValue || 0, idx_end = self.limitValue? self.limitValue + idx_start: results.length;
  _$jscoverage['monglo.min.js'][6]++;
  return results.slice(idx_start, idx_end);
});
_$jscoverage['monglo.min.js'][6]++;
var Monglo = (function (databaseName) {
  _$jscoverage['monglo.min.js'][6]++;
  if (! (this instanceof Monglo)) {
    _$jscoverage['monglo.min.js'][6]++;
    return new Monglo(databaseName);
  }
  _$jscoverage['monglo.min.js'][6]++;
  this._collections = {}, this._stores = [], Monglo.connections || (Monglo.connections = {});
  _$jscoverage['monglo.min.js'][6]++;
  if (Monglo.connections[databaseName]) {
    _$jscoverage['monglo.min.js'][6]++;
    throw new Error("db name already in use");
  }
  _$jscoverage['monglo.min.js'][6]++;
  this.databaseName = databaseName, Monglo.connections[databaseName] = new ObjectID(), validateDatabaseName(databaseName);
});
_$jscoverage['monglo.min.js'][6]++;
Monglo.prototype.__proto__ = EventEmitter.proto, Monglo.prototype.constructor = Monglo, Monglo.version = "0.1.2", Monglo._debug = (function () {
}), Monglo.connections = {}, Monglo.prototype._executeCommand = (function (name, args, cb) {
  _$jscoverage['monglo.min.js'][6]++;
  var self = this, command = name;
  _$jscoverage['monglo.min.js'][6]++;
  utils.forEach(self._stores, (function (fn) {
  _$jscoverage['monglo.min.js'][6]++;
  "function" == typeof fn[command]? fn[command](self, args, cb): "function" == typeof fn.all && (args.name = name, fn.all(self, args, cb));
}));
}), Monglo.prototype.use = (function (name, fn) {
  _$jscoverage['monglo.min.js'][6]++;
  switch (name) {
  case "sync":
    _$jscoverage['monglo.min.js'][6]++;
    this._sync = fn;
    _$jscoverage['monglo.min.js'][6]++;
    break;
  case "store":
    _$jscoverage['monglo.min.js'][6]++;
    this._stores.push(fn);
    _$jscoverage['monglo.min.js'][6]++;
    break;
  case "debug":
    _$jscoverage['monglo.min.js'][6]++;
    Monglo._debug = fn;
  }
}), Monglo.prototype.addStore = (function (store) {
  _$jscoverage['monglo.min.js'][6]++;
  return this._stores.push(store), this;
}), Monglo.prototype.collectionsInfo = (function (collectionName, callback) {
}), Monglo.prototype.collectionNames = (function (collectionName, options, callback) {
  _$jscoverage['monglo.min.js'][6]++;
  var self = this, args = Array.prototype.slice.call(arguments, 0);
  _$jscoverage['monglo.min.js'][6]++;
  callback = args.pop(), collectionName = args.length? args.shift(): null, options = args.length? args.shift(): {};
  _$jscoverage['monglo.min.js'][6]++;
  var collectionList = [];
  _$jscoverage['monglo.min.js'][6]++;
  for (var name in self._collections) {
    _$jscoverage['monglo.min.js'][6]++;
    collectionList.push(name);
}
  _$jscoverage['monglo.min.js'][6]++;
  callback(null, collectionList);
}), Monglo.prototype.collection = (function (collectionName, options, callback) {
  _$jscoverage['monglo.min.js'][6]++;
  var self = this, collection, collectionFullName = self.databaseName + "." + collectionName;
  _$jscoverage['monglo.min.js'][6]++;
  return "function" == typeof options? (options = {}, callback = options): options = options || {}, self._collections[collectionName]? (self._executeCommand("createCollection", {conn: self, collection: self._collections[collectionName]}), callback(null, self._collections[collectionName])): (self._collections[collectionName] = new Collection(self, collectionName, self.pkFactory, options), self._executeCommand("createCollection", {conn: self, collection: self._collections[collectionName]}), Object.defineProperty(Monglo.prototype, collectionName, {enumerable: true, get: (function () {
  _$jscoverage['monglo.min.js'][6]++;
  return self._collections[collectionName];
}), set: (function (v) {
  _$jscoverage['monglo.min.js'][6]++;
  self._collections[collectionName] = v;
})}), callback? callback(self._collections[collectionName]): self._collections[collectionName]);
}), Monglo.prototype.collections = (function (callback) {
  _$jscoverage['monglo.min.js'][6]++;
  var self = this;
  _$jscoverage['monglo.min.js'][6]++;
  self.collectionNames((function (err, documents) {
  _$jscoverage['monglo.min.js'][6]++;
  if (err != null) {
    _$jscoverage['monglo.min.js'][6]++;
    return callback(err, null);
  }
  _$jscoverage['monglo.min.js'][6]++;
  var collections = [];
  _$jscoverage['monglo.min.js'][6]++;
  utils.forEach(documents, (function (document) {
  _$jscoverage['monglo.min.js'][6]++;
  collections.push(new Collection(self, document.name.replace(self.databaseName + ".", ""), self.pkFactory));
})), callback(null, collections);
}));
}), Monglo.prototype.dereference = (function (dbRef, callback) {
  _$jscoverage['monglo.min.js'][6]++;
  var db = this;
  _$jscoverage['monglo.min.js'][6]++;
  dbRef.db !== null && (db = this.db(dbRef.db));
  _$jscoverage['monglo.min.js'][6]++;
  var collection = Monglo.collection(dbRef.namespace);
  _$jscoverage['monglo.min.js'][6]++;
  collection.findOne({_id: dbRef.oid}, (function (err, result) {
  _$jscoverage['monglo.min.js'][6]++;
  callback(err, result);
}));
}), Monglo.prototype.createCollection = Monglo.prototype.collection, Monglo.prototype.dropCollection = (function (collectionName, callback) {
  _$jscoverage['monglo.min.js'][6]++;
  var self = this;
  _$jscoverage['monglo.min.js'][6]++;
  this._executeCommand("dropCollection", {conn: this, collection: self});
}), Monglo.prototype.renameCollection = (function (fromCollection, toCollection, callback) {
  _$jscoverage['monglo.min.js'][6]++;
  var self = this;
  _$jscoverage['monglo.min.js'][6]++;
  this._executeCommand("renameCollection", {conn: self, from: fromCollection, to: toCollection});
}), Monglo.prototype.createIndex = (function (collectionName, fieldOrSpec, options, callback) {
  _$jscoverage['monglo.min.js'][6]++;
  throw new Error("Not implemented yet!");
}), Monglo.prototype.ensureIndex = (function (collectionName, fieldOrSpec, options, callback) {
  _$jscoverage['monglo.min.js'][6]++;
  throw new Error("Not implemented yet!");
}), Monglo.prototype.dropIndex = (function (collectionName, indexName, callback) {
  _$jscoverage['monglo.min.js'][6]++;
  throw new Error("Not implemented yet!");
}), Monglo.prototype.reIndex = (function (collectionName, callback) {
  _$jscoverage['monglo.min.js'][6]++;
  throw new Error("Not implemented yet!");
}), Monglo.prototype.indexInformation = (function (collectionName, options, callback) {
  _$jscoverage['monglo.min.js'][6]++;
  throw new Error("Not implemented yet!");
}), Monglo.prototype.dropDatabase = (function (callback) {
  _$jscoverage['monglo.min.js'][6]++;
  var self = this;
  _$jscoverage['monglo.min.js'][6]++;
  this._executeCommand("dropDatabase", {conn: this});
}), exports.Monglo = Monglo;
_$jscoverage['monglo.min.js'][6]++;
var chr = String.fromCharCode, maxBits = [];
_$jscoverage['monglo.min.js'][6]++;
for (var i = 0; i < 64; i++) {
  _$jscoverage['monglo.min.js'][6]++;
  maxBits[i] = Math.pow(2, i);
}
_$jscoverage['monglo.min.js'][6]++;
BinaryParser.warn = (function warn(msg) {
  _$jscoverage['monglo.min.js'][6]++;
  if (this.allowExceptions) {
    _$jscoverage['monglo.min.js'][6]++;
    throw new Error(msg);
  }
  _$jscoverage['monglo.min.js'][6]++;
  return 1;
}), BinaryParser.decodeFloat = (function decodeFloat(data, precisionBits, exponentBits) {
  _$jscoverage['monglo.min.js'][6]++;
  var b = new this.Buffer(this.bigEndian, data);
  _$jscoverage['monglo.min.js'][6]++;
  b.checkBuffer(precisionBits + exponentBits + 1);
  _$jscoverage['monglo.min.js'][6]++;
  var bias = maxBits[exponentBits - 1] - 1, signal = b.readBits(precisionBits + exponentBits, 1), exponent = b.readBits(precisionBits, exponentBits), significand = 0, divisor = 2, curByte = b.buffer.length + (- precisionBits >> 3) - 1;
  _$jscoverage['monglo.min.js'][6]++;
  do {
    _$jscoverage['monglo.min.js'][6]++;
    for (var byteValue = b.buffer[++curByte], startBit = precisionBits % 8 || 8, mask = 1 << startBit; mask >>= 1; byteValue & mask && (significand += 1 / divisor), divisor *= 2) {
      _$jscoverage['monglo.min.js'][6]++;
      ;
}
}
  while (precisionBits -= startBit);
  _$jscoverage['monglo.min.js'][6]++;
  return exponent == (bias << 1) + 1? significand? NaN: signal? - Infinity: + Infinity: (1 + signal * -2) * (exponent || significand? exponent? Math.pow(2, exponent - bias) * (1 + significand): Math.pow(2, - bias + 1) * significand: 0);
}), BinaryParser.decodeInt = (function decodeInt(data, bits, signed, forceBigEndian) {
  _$jscoverage['monglo.min.js'][6]++;
  var b = new this.Buffer(this.bigEndian || forceBigEndian, data), x = b.readBits(0, bits), max = maxBits[bits];
  _$jscoverage['monglo.min.js'][6]++;
  return signed && x >= max / 2? x - max: x;
}), BinaryParser.encodeFloat = (function encodeFloat(data, precisionBits, exponentBits) {
  _$jscoverage['monglo.min.js'][6]++;
  var bias = maxBits[exponentBits - 1] - 1, minExp = - bias + 1, maxExp = bias, minUnnormExp = minExp - precisionBits, n = parseFloat(data), status = isNaN(n) || n == - Infinity || n == + Infinity? n: 0, exp = 0, len = 2 * bias + 1 + precisionBits + 3, bin = new Array(len), signal = (n = status !== 0? 0: n) < 0, intPart = Math.floor(n = Math.abs(n)), floatPart = n - intPart, lastBit, rounded, result, i, j;
  _$jscoverage['monglo.min.js'][6]++;
  for (i = len; i; bin[--i] = 0) {
    _$jscoverage['monglo.min.js'][6]++;
    ;
}
  _$jscoverage['monglo.min.js'][6]++;
  for (i = bias + 2; intPart && i; bin[--i] = intPart % 2, intPart = Math.floor(intPart / 2)) {
    _$jscoverage['monglo.min.js'][6]++;
    ;
}
  _$jscoverage['monglo.min.js'][6]++;
  for (i = bias + 1; floatPart > 0 && i; (bin[++i] = ((floatPart *= 2) >= 1) - 0) && --floatPart) {
    _$jscoverage['monglo.min.js'][6]++;
    ;
}
  _$jscoverage['monglo.min.js'][6]++;
  for (i = -1; ++i < len && ! bin[i];) {
    _$jscoverage['monglo.min.js'][6]++;
    ;
}
  _$jscoverage['monglo.min.js'][6]++;
  if (bin[(lastBit = precisionBits - 1 + (i = (exp = bias + 1 - i) >= minExp && exp <= maxExp? i + 1: bias + 1 - (exp = minExp - 1))) + 1]) {
    _$jscoverage['monglo.min.js'][6]++;
    if (! (rounded = bin[lastBit])) {
      _$jscoverage['monglo.min.js'][6]++;
      for (j = lastBit + 2; ! rounded && j < len; rounded = bin[j++]) {
        _$jscoverage['monglo.min.js'][6]++;
        ;
}
    }
    _$jscoverage['monglo.min.js'][6]++;
    for (j = lastBit + 1; rounded && --j >= 0; (bin[j] = ! bin[j] - 0) && (rounded = 0)) {
      _$jscoverage['monglo.min.js'][6]++;
      ;
}
  }
  _$jscoverage['monglo.min.js'][6]++;
  for (i = i - 2 < 0? -1: i - 3; ++i < len && ! bin[i];) {
    _$jscoverage['monglo.min.js'][6]++;
    ;
}
  _$jscoverage['monglo.min.js'][6]++;
  (exp = bias + 1 - i) >= minExp && exp <= maxExp? ++i: exp < minExp && (exp != bias + 1 - len && exp < minUnnormExp && this.warn("encodeFloat::float underflow"), i = bias + 1 - (exp = minExp - 1));
  _$jscoverage['monglo.min.js'][6]++;
  if (intPart || status !== 0) {
    _$jscoverage['monglo.min.js'][6]++;
    this.warn(intPart? "encodeFloat::float overflow": "encodeFloat::" + status), exp = maxExp + 1, i = bias + 2, status == - Infinity? signal = 1: isNaN(status) && (bin[i] = 1);
  }
  _$jscoverage['monglo.min.js'][6]++;
  for (n = Math.abs(exp + bias), j = exponentBits + 1, result = ""; --j; result = n % 2 + result, n = n >>= 1) {
    _$jscoverage['monglo.min.js'][6]++;
    ;
}
  _$jscoverage['monglo.min.js'][6]++;
  for (n = 0, j = 0, i = (result = (signal? "1": "0") + result + bin.slice(i, i + precisionBits).join("")).length, r = []; i; j = (j + 1) % 8) {
    _$jscoverage['monglo.min.js'][6]++;
    n += (1 << j) * result.charAt(--i), j == 7 && (r[r.length] = String.fromCharCode(n), n = 0);
}
  _$jscoverage['monglo.min.js'][6]++;
  return r[r.length] = n? String.fromCharCode(n): "", (this.bigEndian? r.reverse(): r).join("");
}), BinaryParser.encodeInt = (function encodeInt(data, bits, signed, forceBigEndian) {
  _$jscoverage['monglo.min.js'][6]++;
  var max = maxBits[bits];
  _$jscoverage['monglo.min.js'][6]++;
  if (data >= max || data < - (max / 2)) {
    _$jscoverage['monglo.min.js'][6]++;
    this.warn("encodeInt::overflow"), data = 0;
  }
  _$jscoverage['monglo.min.js'][6]++;
  data < 0 && (data += max);
  _$jscoverage['monglo.min.js'][6]++;
  for (var r = []; data; r[r.length] = String.fromCharCode(data % 256), data = Math.floor(data / 256)) {
    _$jscoverage['monglo.min.js'][6]++;
    ;
}
  _$jscoverage['monglo.min.js'][6]++;
  for (bits = - (- bits >> 3) - r.length; bits--; r[r.length] = "\u0000") {
    _$jscoverage['monglo.min.js'][6]++;
    ;
}
  _$jscoverage['monglo.min.js'][6]++;
  return (this.bigEndian || forceBigEndian? r.reverse(): r).join("");
}), BinaryParser.toSmall = (function (data) {
  _$jscoverage['monglo.min.js'][6]++;
  return this.decodeInt(data, 8, true);
}), BinaryParser.fromSmall = (function (data) {
  _$jscoverage['monglo.min.js'][6]++;
  return this.encodeInt(data, 8, true);
}), BinaryParser.toByte = (function (data) {
  _$jscoverage['monglo.min.js'][6]++;
  return this.decodeInt(data, 8, false);
}), BinaryParser.fromByte = (function (data) {
  _$jscoverage['monglo.min.js'][6]++;
  return this.encodeInt(data, 8, false);
}), BinaryParser.toShort = (function (data) {
  _$jscoverage['monglo.min.js'][6]++;
  return this.decodeInt(data, 16, true);
}), BinaryParser.fromShort = (function (data) {
  _$jscoverage['monglo.min.js'][6]++;
  return this.encodeInt(data, 16, true);
}), BinaryParser.toWord = (function (data) {
  _$jscoverage['monglo.min.js'][6]++;
  return this.decodeInt(data, 16, false);
}), BinaryParser.fromWord = (function (data) {
  _$jscoverage['monglo.min.js'][6]++;
  return this.encodeInt(data, 16, false);
}), BinaryParser.toInt = (function (data) {
  _$jscoverage['monglo.min.js'][6]++;
  return this.decodeInt(data, 32, true);
}), BinaryParser.fromInt = (function (data) {
  _$jscoverage['monglo.min.js'][6]++;
  return this.encodeInt(data, 32, true);
}), BinaryParser.toLong = (function (data) {
  _$jscoverage['monglo.min.js'][6]++;
  return this.decodeInt(data, 64, true);
}), BinaryParser.fromLong = (function (data) {
  _$jscoverage['monglo.min.js'][6]++;
  return this.encodeInt(data, 64, true);
}), BinaryParser.toDWord = (function (data) {
  _$jscoverage['monglo.min.js'][6]++;
  return this.decodeInt(data, 32, false);
}), BinaryParser.fromDWord = (function (data) {
  _$jscoverage['monglo.min.js'][6]++;
  return this.encodeInt(data, 32, false);
}), BinaryParser.toQWord = (function (data) {
  _$jscoverage['monglo.min.js'][6]++;
  return this.decodeInt(data, 64, true);
}), BinaryParser.fromQWord = (function (data) {
  _$jscoverage['monglo.min.js'][6]++;
  return this.encodeInt(data, 64, true);
}), BinaryParser.toFloat = (function (data) {
  _$jscoverage['monglo.min.js'][6]++;
  return this.decodeFloat(data, 23, 8);
}), BinaryParser.fromFloat = (function (data) {
  _$jscoverage['monglo.min.js'][6]++;
  return this.encodeFloat(data, 23, 8);
}), BinaryParser.toDouble = (function (data) {
  _$jscoverage['monglo.min.js'][6]++;
  return this.decodeFloat(data, 52, 11);
}), BinaryParser.fromDouble = (function (data) {
  _$jscoverage['monglo.min.js'][6]++;
  return this.encodeFloat(data, 52, 11);
}), BinaryParser.encode_int32 = (function encode_int32(number, asArray) {
  _$jscoverage['monglo.min.js'][6]++;
  var a, b, c, d, unsigned;
  _$jscoverage['monglo.min.js'][6]++;
  return unsigned = number < 0? number + 4294967296: number, a = Math.floor(unsigned / 16777215), unsigned &= 16777215, b = Math.floor(unsigned / 65535), unsigned &= 65535, c = Math.floor(unsigned / 255), unsigned &= 255, d = Math.floor(unsigned), asArray? [chr(a), chr(b), chr(c), chr(d)]: chr(a) + chr(b) + chr(c) + chr(d);
}), BinaryParser.encode_int64 = (function encode_int64(number) {
  _$jscoverage['monglo.min.js'][6]++;
  var a, b, c, d, e, f, g, h, unsigned;
  _$jscoverage['monglo.min.js'][6]++;
  return unsigned = number < 0? number + 1.84467440737096e+19: number, a = Math.floor(unsigned / 7.20575940379279e+16), unsigned &= 7.20575940379279e+16, b = Math.floor(unsigned / 281474976710655), unsigned &= 281474976710655, c = Math.floor(unsigned / 1099511627775), unsigned &= 1099511627775, d = Math.floor(unsigned / 4294967295), unsigned &= 4294967295, e = Math.floor(unsigned / 16777215), unsigned &= 16777215, f = Math.floor(unsigned / 65535), unsigned &= 65535, g = Math.floor(unsigned / 255), unsigned &= 255, h = Math.floor(unsigned), chr(a) + chr(b) + chr(c) + chr(d) + chr(e) + chr(f) + chr(g) + chr(h);
}), BinaryParser.decode_utf8 = (function decode_utf8(binaryStr) {
  _$jscoverage['monglo.min.js'][6]++;
  var len = binaryStr.length, decoded = "", i = 0, c = 0, c1 = 0, c2 = 0, c3;
  _$jscoverage['monglo.min.js'][6]++;
  while (i < len) {
    _$jscoverage['monglo.min.js'][6]++;
    c = binaryStr.charCodeAt(i), c < 128? (decoded += String.fromCharCode(c), i++): c > 191 && c < 224? (c2 = binaryStr.charCodeAt(i + 1), decoded += String.fromCharCode((c & 31) << 6 | c2 & 63), i += 2): (c2 = binaryStr.charCodeAt(i + 1), c3 = binaryStr.charCodeAt(i + 2), decoded += String.fromCharCode((c & 15) << 12 | (c2 & 63) << 6 | c3 & 63), i += 3);
}
  _$jscoverage['monglo.min.js'][6]++;
  return decoded;
}), BinaryParser.encode_cstring = (function encode_cstring(s) {
  _$jscoverage['monglo.min.js'][6]++;
  return unescape(encodeURIComponent(s)) + BinaryParser.fromByte(0);
}), BinaryParser.encode_utf8 = (function encode_utf8(s) {
  _$jscoverage['monglo.min.js'][6]++;
  var a = "", c;
  _$jscoverage['monglo.min.js'][6]++;
  for (var n = 0, len = s.length; n < len; n++) {
    _$jscoverage['monglo.min.js'][6]++;
    c = s.charCodeAt(n), c < 128? a += String.fromCharCode(c): c > 127 && c < 2048? (a += String.fromCharCode(c >> 6 | 192), a += String.fromCharCode(c & 63 | 128)): (a += String.fromCharCode(c >> 12 | 224), a += String.fromCharCode(c >> 6 & 63 | 128), a += String.fromCharCode(c & 63 | 128));
}
  _$jscoverage['monglo.min.js'][6]++;
  return a;
}), BinaryParser.hprint = (function hprint(s) {
  _$jscoverage['monglo.min.js'][6]++;
  var number;
  _$jscoverage['monglo.min.js'][6]++;
  for (var i = 0, len = s.length; i < len; i++) {
    _$jscoverage['monglo.min.js'][6]++;
    s.charCodeAt(i) < 32? (number = s.charCodeAt(i) <= 15? "0" + s.charCodeAt(i).toString(16): s.charCodeAt(i).toString(16), process.stdout.write(number + " ")): (number = s.charCodeAt(i) <= 15? "0" + s.charCodeAt(i).toString(16): s.charCodeAt(i).toString(16), process.stdout.write(number + " "));
}
  _$jscoverage['monglo.min.js'][6]++;
  process.stdout.write("\n\n");
}), BinaryParser.ilprint = (function hprint(s) {
  _$jscoverage['monglo.min.js'][6]++;
  var number;
  _$jscoverage['monglo.min.js'][6]++;
  for (var i = 0, len = s.length; i < len; i++) {
    _$jscoverage['monglo.min.js'][6]++;
    s.charCodeAt(i) < 32? number = s.charCodeAt(i) <= 15? "0" + s.charCodeAt(i).toString(10): s.charCodeAt(i).toString(10): number = s.charCodeAt(i) <= 15? "0" + s.charCodeAt(i).toString(10): s.charCodeAt(i).toString(10);
}
}), BinaryParser.hlprint = (function hprint(s) {
  _$jscoverage['monglo.min.js'][6]++;
  var number;
  _$jscoverage['monglo.min.js'][6]++;
  for (var i = 0, len = s.length; i < len; i++) {
    _$jscoverage['monglo.min.js'][6]++;
    s.charCodeAt(i) < 32? number = s.charCodeAt(i) <= 15? "0" + s.charCodeAt(i).toString(16): s.charCodeAt(i).toString(16): number = s.charCodeAt(i) <= 15? "0" + s.charCodeAt(i).toString(16): s.charCodeAt(i).toString(16);
}
}), BinaryParserBuffer.prototype.setBuffer = (function setBuffer(data) {
  _$jscoverage['monglo.min.js'][6]++;
  var l, i, b;
  _$jscoverage['monglo.min.js'][6]++;
  if (data) {
    _$jscoverage['monglo.min.js'][6]++;
    i = l = data.length, b = this.buffer = new Array(l);
    _$jscoverage['monglo.min.js'][6]++;
    for (; i; b[l - i] = data.charCodeAt(--i)) {
      _$jscoverage['monglo.min.js'][6]++;
      ;
}
    _$jscoverage['monglo.min.js'][6]++;
    this.bigEndian && b.reverse();
  }
}), BinaryParserBuffer.prototype.hasNeededBits = (function hasNeededBits(neededBits) {
  _$jscoverage['monglo.min.js'][6]++;
  return this.buffer.length >= - (- neededBits >> 3);
}), BinaryParserBuffer.prototype.checkBuffer = (function checkBuffer(neededBits) {
  _$jscoverage['monglo.min.js'][6]++;
  if (! this.hasNeededBits(neededBits)) {
    _$jscoverage['monglo.min.js'][6]++;
    throw new Error("checkBuffer::missing bytes");
  }
}), BinaryParserBuffer.prototype.readBits = (function readBits(start, length) {
  _$jscoverage['monglo.min.js'][6]++;
  function shl(a, b) {
    _$jscoverage['monglo.min.js'][6]++;
    for (; b--; a = ((a %= 2147483648) & 1073741824) == 1073741824? a * 2: (a - 1073741824) * 2 + 2147483647 + 1) {
      _$jscoverage['monglo.min.js'][6]++;
      ;
}
    _$jscoverage['monglo.min.js'][6]++;
    return a;
}
  _$jscoverage['monglo.min.js'][6]++;
  if (start < 0 || length <= 0) {
    _$jscoverage['monglo.min.js'][6]++;
    return 0;
  }
  _$jscoverage['monglo.min.js'][6]++;
  this.checkBuffer(start + length);
  _$jscoverage['monglo.min.js'][6]++;
  var offsetLeft, offsetRight = start % 8, curByte = this.buffer.length - (start >> 3) - 1, lastByte = this.buffer.length + (- (start + length) >> 3), diff = curByte - lastByte, sum = (this.buffer[curByte] >> offsetRight & (1 << (diff? 8 - offsetRight: length)) - 1) + (diff && (offsetLeft = (start + length) % 8)? (this.buffer[lastByte++] & (1 << offsetLeft) - 1) << (diff-- << 3) - offsetRight: 0);
  _$jscoverage['monglo.min.js'][6]++;
  for (; diff; sum += shl(this.buffer[lastByte++], (diff-- << 3) - offsetRight)) {
    _$jscoverage['monglo.min.js'][6]++;
    ;
}
  _$jscoverage['monglo.min.js'][6]++;
  return sum;
}), BinaryParser.Buffer = BinaryParserBuffer, typeof window == "undefined" && (exports.BinaryParser = BinaryParser);
_$jscoverage['monglo.min.js'][6]++;
var MACHINE_ID = parseInt(Math.random() * 16777215, 10), checkForHexRegExp = new RegExp("^[0-9a-fA-F]{24}$"), ObjectID = (function ObjectID(id, _hex) {
  _$jscoverage['monglo.min.js'][6]++;
  if (! (this instanceof ObjectID)) {
    _$jscoverage['monglo.min.js'][6]++;
    return new ObjectID(id, _hex);
  }
  _$jscoverage['monglo.min.js'][6]++;
  this._bsontype = "ObjectID";
  _$jscoverage['monglo.min.js'][6]++;
  var __id = null;
  _$jscoverage['monglo.min.js'][6]++;
  if (id != null && "number" != typeof id && id.length != 12 && id.length != 24) {
    _$jscoverage['monglo.min.js'][6]++;
    throw new Error("Argument passed in must be a single String of 12 bytes or a string of 24 hex characters");
  }
  _$jscoverage['monglo.min.js'][6]++;
  if (id == null || typeof id == "number") {
    _$jscoverage['monglo.min.js'][6]++;
    this.id = this.generate(id);
  }
  else {
    _$jscoverage['monglo.min.js'][6]++;
    if (id != null && id.length === 12) {
      _$jscoverage['monglo.min.js'][6]++;
      this.id = id;
    }
    else {
      _$jscoverage['monglo.min.js'][6]++;
      if (checkForHexRegExp.test(id)) {
        _$jscoverage['monglo.min.js'][6]++;
        return ObjectID.createFromHexString(id);
      }
      _$jscoverage['monglo.min.js'][6]++;
      if (! checkForHexRegExp.test(id)) {
        _$jscoverage['monglo.min.js'][6]++;
        throw new Error("Value passed in is not a valid 24 character hex string");
      }
    }
  }
  _$jscoverage['monglo.min.js'][6]++;
  ObjectID.cacheHexString && (this.__id = this.toHexString());
}), ObjectId = ObjectID;
_$jscoverage['monglo.min.js'][6]++;
ObjectID.prototype.toHexString = (function () {
  _$jscoverage['monglo.min.js'][6]++;
  if (ObjectID.cacheHexString && this.__id) {
    _$jscoverage['monglo.min.js'][6]++;
    return this.__id;
  }
  _$jscoverage['monglo.min.js'][6]++;
  var hexString = "", number, value;
  _$jscoverage['monglo.min.js'][6]++;
  for (var index = 0, len = this.id.length; index < len; index++) {
    _$jscoverage['monglo.min.js'][6]++;
    value = BinaryParser.toByte(this.id[index]), number = value <= 15? "0" + value.toString(16): value.toString(16), hexString += number;
}
  _$jscoverage['monglo.min.js'][6]++;
  return ObjectID.cacheHexString && (this.__id = hexString), hexString;
}), ObjectID.prototype.get_inc = (function () {
  _$jscoverage['monglo.min.js'][6]++;
  return ObjectID.index = (ObjectID.index + 1) % 16777215;
}), ObjectID.prototype.getInc = (function () {
  _$jscoverage['monglo.min.js'][6]++;
  return this.get_inc();
}), ObjectID.prototype.generate = (function (time) {
  _$jscoverage['monglo.min.js'][6]++;
  if ("number" == typeof time) {
    _$jscoverage['monglo.min.js'][6]++;
    var time4Bytes = BinaryParser.encodeInt(time, 32, true, true), machine3Bytes = BinaryParser.encodeInt(MACHINE_ID, 24, false), pid2Bytes = BinaryParser.fromShort(typeof process == "undefined"? Math.floor(Math.random() * 100000): process.pid), index3Bytes = BinaryParser.encodeInt(this.get_inc(), 24, false, true);
  }
  else {
    _$jscoverage['monglo.min.js'][6]++;
    var unixTime = parseInt(Date.now() / 1000, 10), time4Bytes = BinaryParser.encodeInt(unixTime, 32, true, true), machine3Bytes = BinaryParser.encodeInt(MACHINE_ID, 24, false), pid2Bytes = BinaryParser.fromShort(typeof process == "undefined"? Math.floor(Math.random() * 100000): process.pid), index3Bytes = BinaryParser.encodeInt(this.get_inc(), 24, false, true);
  }
  _$jscoverage['monglo.min.js'][6]++;
  return time4Bytes + machine3Bytes + pid2Bytes + index3Bytes;
}), ObjectID.prototype.toString = (function () {
  _$jscoverage['monglo.min.js'][6]++;
  return this.toHexString();
}), ObjectID.prototype.inspect = ObjectID.prototype.toString, ObjectID.prototype.toJSON = (function () {
  _$jscoverage['monglo.min.js'][6]++;
  return this.toHexString();
}), ObjectID.prototype.equals = (function equals(otherID) {
  _$jscoverage['monglo.min.js'][6]++;
  var id = otherID instanceof ObjectID || otherID.toHexString? otherID.id: ObjectID.createFromHexString(otherID).id;
  _$jscoverage['monglo.min.js'][6]++;
  return this.id === id;
}), ObjectID.prototype.getTimestamp = (function () {
  _$jscoverage['monglo.min.js'][6]++;
  var timestamp = new Date();
  _$jscoverage['monglo.min.js'][6]++;
  return timestamp.setTime(Math.floor(BinaryParser.decodeInt(this.id.substring(0, 4), 32, true, true)) * 1000), timestamp;
}), ObjectID.index = 0, ObjectID.createPk = (function createPk() {
  _$jscoverage['monglo.min.js'][6]++;
  return new ObjectID();
}), ObjectID.createFromTime = (function createFromTime(time) {
  _$jscoverage['monglo.min.js'][6]++;
  var id = BinaryParser.encodeInt(time, 32, true, true) + BinaryParser.encodeInt(0, 64, true, true);
  _$jscoverage['monglo.min.js'][6]++;
  return new ObjectID(id);
}), ObjectID.createFromHexString = (function createFromHexString(hexString) {
  _$jscoverage['monglo.min.js'][6]++;
  if (typeof hexString == "undefined" || hexString != null && hexString.length != 24) {
    _$jscoverage['monglo.min.js'][6]++;
    throw new Error("Argument passed in must be a single String of 12 bytes or a string of 24 hex characters");
  }
  _$jscoverage['monglo.min.js'][6]++;
  var len = hexString.length;
  _$jscoverage['monglo.min.js'][6]++;
  if (len > 24) {
    _$jscoverage['monglo.min.js'][6]++;
    throw new Error("Id cannot be longer than 12 bytes");
  }
  _$jscoverage['monglo.min.js'][6]++;
  var result = "", string, number;
  _$jscoverage['monglo.min.js'][6]++;
  for (var index = 0; index < len; index += 2) {
    _$jscoverage['monglo.min.js'][6]++;
    string = hexString.substr(index, 2), number = parseInt(string, 16), result += BinaryParser.fromByte(number);
}
  _$jscoverage['monglo.min.js'][6]++;
  return new ObjectID(result, hexString);
}), Object.defineProperty(ObjectID.prototype, "generationTime", {enumerable: true, get: (function () {
  _$jscoverage['monglo.min.js'][6]++;
  return Math.floor(BinaryParser.decodeInt(this.id.substring(0, 4), 32, true, true));
}), set: (function (value) {
  _$jscoverage['monglo.min.js'][6]++;
  var value = BinaryParser.encodeInt(value, 32, true, true);
  _$jscoverage['monglo.min.js'][6]++;
  this.id = value + this.id.substr(4), this.toHexString();
})}), exports.ObjectID = ObjectID, exports.ObjectId = ObjectID, Collection._diffQuery = (function (old_results, new_results, observer, deepcopy) {
  _$jscoverage['monglo.min.js'][6]++;
  var new_presence_of_id = {};
  _$jscoverage['monglo.min.js'][6]++;
  _.each(new_results, (function (doc) {
  _$jscoverage['monglo.min.js'][6]++;
  new_presence_of_id[doc._id] && utils.debug("Duplicate _id in new_results"), new_presence_of_id[doc._id] = true;
}));
  _$jscoverage['monglo.min.js'][6]++;
  var old_index_of_id = {};
  _$jscoverage['monglo.min.js'][6]++;
  _.each(old_results, (function (doc, i) {
  _$jscoverage['monglo.min.js'][6]++;
  doc._id in old_index_of_id && utils.debug("Duplicate _id in old_results"), old_index_of_id[doc._id] = i;
}));
  _$jscoverage['monglo.min.js'][6]++;
  var mdc = deepcopy? Collection._deepcopy: _.identity, unmoved_set = {}, max_seq_len = 0, N = new_results.length, seq_ends = new Array(N), ptrs = new Array(N), old_idx_seq = (function (i_new) {
  _$jscoverage['monglo.min.js'][6]++;
  return old_index_of_id[new_results[i_new]._id];
});
  _$jscoverage['monglo.min.js'][6]++;
  for (var i = 0; i < N; i++) {
    _$jscoverage['monglo.min.js'][6]++;
    if (old_index_of_id[new_results[i]._id] !== undefined) {
      _$jscoverage['monglo.min.js'][6]++;
      var j = max_seq_len;
      _$jscoverage['monglo.min.js'][6]++;
      while (j > 0) {
        _$jscoverage['monglo.min.js'][6]++;
        if (old_idx_seq(seq_ends[j - 1]) < old_idx_seq(i)) {
          _$jscoverage['monglo.min.js'][6]++;
          break;
        }
        _$jscoverage['monglo.min.js'][6]++;
        j--;
}
      _$jscoverage['monglo.min.js'][6]++;
      ptrs[i] = j === 0? -1: seq_ends[j - 1], seq_ends[j] = i, j + 1 > max_seq_len && (max_seq_len = j + 1);
    }
}
  _$jscoverage['monglo.min.js'][6]++;
  var idx = max_seq_len === 0? -1: seq_ends[max_seq_len - 1];
  _$jscoverage['monglo.min.js'][6]++;
  while (idx >= 0) {
    _$jscoverage['monglo.min.js'][6]++;
    unmoved_set[idx] = true, idx = ptrs[idx];
}
  _$jscoverage['monglo.min.js'][6]++;
  var old_idx = 0, new_idx = 0, bump_list = [], bump_list_old_idx = [], taken_list = [], scan_to = (function (old_j) {
  _$jscoverage['monglo.min.js'][6]++;
  while (old_idx < old_j) {
    _$jscoverage['monglo.min.js'][6]++;
    var old_doc = old_results[old_idx], is_in_new = new_presence_of_id[old_doc._id];
    _$jscoverage['monglo.min.js'][6]++;
    is_in_new? taken_list.length >= 1 && taken_list[0] === old_idx? taken_list.shift(): (bump_list.push(new_idx), bump_list_old_idx.push(old_idx)): observer.removed && observer.removed(old_doc, new_idx + bump_list.length), old_idx++;
}
});
  _$jscoverage['monglo.min.js'][6]++;
  while (new_idx <= new_results.length) {
    _$jscoverage['monglo.min.js'][6]++;
    if (new_idx < new_results.length) {
      _$jscoverage['monglo.min.js'][6]++;
      var new_doc = new_results[new_idx], old_doc_idx = old_index_of_id[new_doc._id];
      _$jscoverage['monglo.min.js'][6]++;
      if (old_doc_idx === undefined) {
        _$jscoverage['monglo.min.js'][6]++;
        observer.added && observer.added(mdc(new_doc), new_idx + bump_list.length);
      }
      else {
        _$jscoverage['monglo.min.js'][6]++;
        var old_doc = old_results[old_doc_idx], is_unmoved = unmoved_set[new_idx];
        _$jscoverage['monglo.min.js'][6]++;
        if (is_unmoved) {
          _$jscoverage['monglo.min.js'][6]++;
          old_doc_idx < old_idx && utils.debug("Assertion failed while diffing: nonmonotonic lcs data"), scan_to(old_doc_idx), _.isEqual(old_doc, new_doc) || observer.changed && observer.changed(mdc(new_doc), new_idx + bump_list.length, old_doc), old_idx++;
        }
        else {
          _$jscoverage['monglo.min.js'][6]++;
          var to_idx = new_idx + bump_list.length, from_idx;
          _$jscoverage['monglo.min.js'][6]++;
          if (old_doc_idx >= old_idx) {
            _$jscoverage['monglo.min.js'][6]++;
            from_idx = to_idx + old_doc_idx - old_idx;
            _$jscoverage['monglo.min.js'][6]++;
            var num_taken_before = _.sortedIndex(taken_list, old_doc_idx);
            _$jscoverage['monglo.min.js'][6]++;
            from_idx -= num_taken_before, taken_list.splice(num_taken_before, 0, old_doc_idx);
          }
          else {
            _$jscoverage['monglo.min.js'][6]++;
            var b = _.indexOf(bump_list_old_idx, old_doc_idx, true);
            _$jscoverage['monglo.min.js'][6]++;
            b < 0 && utils.debug("Assertion failed while diffing: no bumped item"), from_idx = bump_list[b] + b, to_idx--, bump_list.splice(b, 1), bump_list_old_idx.splice(b, 1);
          }
          _$jscoverage['monglo.min.js'][6]++;
          from_idx != to_idx && observer.moved && observer.moved(mdc(old_doc), from_idx, to_idx), _.isEqual(old_doc, new_doc) || observer.changed && observer.changed(mdc(new_doc), to_idx, old_doc);
        }
      }
    }
    else {
      _$jscoverage['monglo.min.js'][6]++;
      scan_to(old_results.length);
    }
    _$jscoverage['monglo.min.js'][6]++;
    new_idx++;
}
  _$jscoverage['monglo.min.js'][6]++;
  bump_list.length > 0 && (utils.debug(old_results), utils.debug(new_results), utils.debug("Assertion failed while diffing: leftover bump_list " + bump_list));
});
_$jscoverage['monglo.min.js'][6]++;
var isArray = Array.isArray, domain;
_$jscoverage['monglo.min.js'][6]++;
exports.EventEmitter = EventEmitter;
_$jscoverage['monglo.min.js'][6]++;
var defaultMaxListeners = 10;
_$jscoverage['monglo.min.js'][6]++;
EventEmitter.prototype.setMaxListeners = (function (n) {
  _$jscoverage['monglo.min.js'][6]++;
  this._events || (this._events = {}), this._maxListeners = n;
}), EventEmitter.prototype.emit = (function () {
  _$jscoverage['monglo.min.js'][6]++;
  var type = arguments[0];
  _$jscoverage['monglo.min.js'][6]++;
  if (type === "error") {
    _$jscoverage['monglo.min.js'][6]++;
    if (! this._events || ! this._events.error || isArray(this._events.error) && ! this._events.error.length) {
      _$jscoverage['monglo.min.js'][6]++;
      throw arguments[1] instanceof Error? arguments[1]: new Error("Uncaught, unspecified 'error' event.");
    }
  }
  _$jscoverage['monglo.min.js'][6]++;
  if (! this._events) {
    _$jscoverage['monglo.min.js'][6]++;
    return false;
  }
  _$jscoverage['monglo.min.js'][6]++;
  var handler = this._events[type];
  _$jscoverage['monglo.min.js'][6]++;
  if (! handler) {
    _$jscoverage['monglo.min.js'][6]++;
    return false;
  }
  _$jscoverage['monglo.min.js'][6]++;
  if (typeof handler == "function") {
    _$jscoverage['monglo.min.js'][6]++;
    switch (arguments.length) {
    case 1:
      _$jscoverage['monglo.min.js'][6]++;
      handler.call(this);
      _$jscoverage['monglo.min.js'][6]++;
      break;
    case 2:
      _$jscoverage['monglo.min.js'][6]++;
      handler.call(this, arguments[1]);
      _$jscoverage['monglo.min.js'][6]++;
      break;
    case 3:
      _$jscoverage['monglo.min.js'][6]++;
      handler.call(this, arguments[1], arguments[2]);
      _$jscoverage['monglo.min.js'][6]++;
      break;
    default:
      _$jscoverage['monglo.min.js'][6]++;
      var l = arguments.length, args = new Array(l - 1);
      _$jscoverage['monglo.min.js'][6]++;
      for (var i = 1; i < l; i++) {
        _$jscoverage['monglo.min.js'][6]++;
        args[i - 1] = arguments[i];
}
      _$jscoverage['monglo.min.js'][6]++;
      handler.apply(this, args);
    }
    _$jscoverage['monglo.min.js'][6]++;
    return true;
  }
  _$jscoverage['monglo.min.js'][6]++;
  if (isArray(handler)) {
    _$jscoverage['monglo.min.js'][6]++;
    var l = arguments.length, args = new Array(l - 1);
    _$jscoverage['monglo.min.js'][6]++;
    for (var i = 1; i < l; i++) {
      _$jscoverage['monglo.min.js'][6]++;
      args[i - 1] = arguments[i];
}
    _$jscoverage['monglo.min.js'][6]++;
    var listeners = handler.slice();
    _$jscoverage['monglo.min.js'][6]++;
    for (var i = 0, l = listeners.length; i < l; i++) {
      _$jscoverage['monglo.min.js'][6]++;
      listeners[i].apply(this, args);
}
    _$jscoverage['monglo.min.js'][6]++;
    return true;
  }
  _$jscoverage['monglo.min.js'][6]++;
  return false;
}), EventEmitter.prototype.addListener = (function (type, listener) {
  _$jscoverage['monglo.min.js'][6]++;
  if ("function" != typeof listener) {
    _$jscoverage['monglo.min.js'][6]++;
    throw new Error("addListener only takes instances of Function");
  }
  _$jscoverage['monglo.min.js'][6]++;
  this._events || (this._events = {}), this.emit("newListener", type, typeof listener.listener == "function"? listener.listener: listener), this._events[type]? isArray(this._events[type])? this._events[type].push(listener): this._events[type] = [this._events[type], listener]: this._events[type] = listener;
  _$jscoverage['monglo.min.js'][6]++;
  if (isArray(this._events[type]) && ! this._events[type].warned) {
    _$jscoverage['monglo.min.js'][6]++;
    var m;
    _$jscoverage['monglo.min.js'][6]++;
    this._maxListeners !== undefined? m = this._maxListeners: m = defaultMaxListeners, m && m > 0 && this._events[type].length > m && (this._events[type].warned = true, console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.", this._events[type].length), console.trace());
  }
  _$jscoverage['monglo.min.js'][6]++;
  return this;
}), EventEmitter.prototype.on = EventEmitter.prototype.addListener, EventEmitter.prototype.once = (function (type, listener) {
  _$jscoverage['monglo.min.js'][6]++;
  function g() {
    _$jscoverage['monglo.min.js'][6]++;
    self.removeListener(type, g), listener.apply(this, arguments);
}
  _$jscoverage['monglo.min.js'][6]++;
  if ("function" != typeof listener) {
    _$jscoverage['monglo.min.js'][6]++;
    throw new Error(".once only takes instances of Function");
  }
  _$jscoverage['monglo.min.js'][6]++;
  var self = this;
  _$jscoverage['monglo.min.js'][6]++;
  return g.listener = listener, self.on(type, g), this;
}), EventEmitter.prototype.removeListener = (function (type, listener) {
  _$jscoverage['monglo.min.js'][6]++;
  if ("function" != typeof listener) {
    _$jscoverage['monglo.min.js'][6]++;
    throw new Error("removeListener only takes instances of Function");
  }
  _$jscoverage['monglo.min.js'][6]++;
  if (! this._events || ! this._events[type]) {
    _$jscoverage['monglo.min.js'][6]++;
    return this;
  }
  _$jscoverage['monglo.min.js'][6]++;
  var list = this._events[type];
  _$jscoverage['monglo.min.js'][6]++;
  if (isArray(list)) {
    _$jscoverage['monglo.min.js'][6]++;
    var position = -1;
    _$jscoverage['monglo.min.js'][6]++;
    for (var i = 0, length = list.length; i < length; i++) {
      _$jscoverage['monglo.min.js'][6]++;
      if (list[i] === listener || list[i].listener && list[i].listener === listener) {
        _$jscoverage['monglo.min.js'][6]++;
        position = i;
        _$jscoverage['monglo.min.js'][6]++;
        break;
      }
}
    _$jscoverage['monglo.min.js'][6]++;
    if (position < 0) {
      _$jscoverage['monglo.min.js'][6]++;
      return this;
    }
    _$jscoverage['monglo.min.js'][6]++;
    list.splice(position, 1);
  }
  else {
    _$jscoverage['monglo.min.js'][6]++;
    (list === listener || list.listener && list.listener === listener) && delete this._events[type];
  }
  _$jscoverage['monglo.min.js'][6]++;
  return this;
}), EventEmitter.prototype.removeAllListeners = (function (type) {
  _$jscoverage['monglo.min.js'][6]++;
  return arguments.length === 0? (this._events = {}, this): (type && this._events && this._events[type] && (this._events[type] = null), this);
}), EventEmitter.prototype.listeners = (function (type) {
  _$jscoverage['monglo.min.js'][6]++;
  return this._events || (this._events = {}), this._events[type] || (this._events[type] = []), isArray(this._events[type]) || (this._events[type] = [this._events[type]]), this._events[type];
}), Collection._modify = (function (doc, mod) {
  _$jscoverage['monglo.min.js'][6]++;
  var is_modifier = false;
  _$jscoverage['monglo.min.js'][6]++;
  for (var k in mod) {
    _$jscoverage['monglo.min.js'][6]++;
    is_modifier = k.substr(0, 1) === "$";
    _$jscoverage['monglo.min.js'][6]++;
    break;
}
  _$jscoverage['monglo.min.js'][6]++;
  var new_doc;
  _$jscoverage['monglo.min.js'][6]++;
  if (! is_modifier) {
    _$jscoverage['monglo.min.js'][6]++;
    mod._id && doc._id !== mod._id && Monglo._debug("_id ignored : Cannot change the _id of a document");
    _$jscoverage['monglo.min.js'][6]++;
    for (var k in mod) {
      _$jscoverage['monglo.min.js'][6]++;
      if (k.substr(0, 1) === "$") {
        _$jscoverage['monglo.min.js'][6]++;
        throw Error("Field name may not start with '$'");
      }
      _$jscoverage['monglo.min.js'][6]++;
      if (/\./.test(k)) {
        _$jscoverage['monglo.min.js'][6]++;
        throw Error("Field name may not contain '.'");
      }
}
    _$jscoverage['monglo.min.js'][6]++;
    new_doc = mod;
  }
  else {
    _$jscoverage['monglo.min.js'][6]++;
    var new_doc = Collection._deepcopy(doc);
    _$jscoverage['monglo.min.js'][6]++;
    for (var op in mod) {
      _$jscoverage['monglo.min.js'][6]++;
      var mod_func = Collection._modifiers[op];
      _$jscoverage['monglo.min.js'][6]++;
      if (! mod_func) {
        _$jscoverage['monglo.min.js'][6]++;
        throw Error("Invalid modifier specified " + op);
      }
      _$jscoverage['monglo.min.js'][6]++;
      for (var keypath in mod[op]) {
        _$jscoverage['monglo.min.js'][6]++;
        if (keypath.length && keypath[keypath.length - 1] === ".") {
          _$jscoverage['monglo.min.js'][6]++;
          throw Error("Invalid mod field name, may not end in a period");
        }
        _$jscoverage['monglo.min.js'][6]++;
        var arg = mod[op][keypath], keyparts = keypath.split("."), no_create = ! ! Collection._noCreateModifiers[op], forbid_array = op === "$rename", target = Collection._findModTarget(new_doc, keyparts, no_create, forbid_array), field = keyparts.pop();
        _$jscoverage['monglo.min.js'][6]++;
        mod_func(target, field, arg, keypath, new_doc);
}
}
  }
  _$jscoverage['monglo.min.js'][6]++;
  for (var k in doc) {
    _$jscoverage['monglo.min.js'][6]++;
    k !== "_id" && delete doc[k];
}
  _$jscoverage['monglo.min.js'][6]++;
  for (var k in new_doc) {
    _$jscoverage['monglo.min.js'][6]++;
    doc[k] = new_doc[k];
}
}), Collection._findModTarget = (function (doc, keyparts, no_create, forbid_array) {
  _$jscoverage['monglo.min.js'][6]++;
  for (var i = 0; i < keyparts.length; i++) {
    _$jscoverage['monglo.min.js'][6]++;
    var last = i === keyparts.length - 1, keypart = keyparts[i], numeric = /^[0-9]+$/.test(keypart);
    _$jscoverage['monglo.min.js'][6]++;
    if (! (! no_create || typeof doc == "object" && keypart in doc)) {
      _$jscoverage['monglo.min.js'][6]++;
      return undefined;
    }
    _$jscoverage['monglo.min.js'][6]++;
    if (doc instanceof Array) {
      _$jscoverage['monglo.min.js'][6]++;
      if (forbid_array) {
        _$jscoverage['monglo.min.js'][6]++;
        return null;
      }
      _$jscoverage['monglo.min.js'][6]++;
      if (! numeric) {
        _$jscoverage['monglo.min.js'][6]++;
        throw Error("can't append to array using string field name [" + keypart + "]");
      }
      _$jscoverage['monglo.min.js'][6]++;
      keypart = parseInt(keypart), last && (keyparts[i] = keypart);
      _$jscoverage['monglo.min.js'][6]++;
      while (doc.length < keypart) {
        _$jscoverage['monglo.min.js'][6]++;
        doc.push(null);
}
      _$jscoverage['monglo.min.js'][6]++;
      if (! last) {
        _$jscoverage['monglo.min.js'][6]++;
        if (doc.length === keypart) {
          _$jscoverage['monglo.min.js'][6]++;
          doc.push({});
        }
        else {
          _$jscoverage['monglo.min.js'][6]++;
          if (typeof doc[keypart] != "object") {
            _$jscoverage['monglo.min.js'][6]++;
            throw Error("can't modify field '" + keyparts[i + 1] + "' of list value " + JSON.stringify(doc[keypart]));
          }
        }
      }
    }
    else {
      _$jscoverage['monglo.min.js'][6]++;
      ! last && ! (keypart in doc) && (doc[keypart] = {});
    }
    _$jscoverage['monglo.min.js'][6]++;
    if (last) {
      _$jscoverage['monglo.min.js'][6]++;
      return doc;
    }
    _$jscoverage['monglo.min.js'][6]++;
    doc = doc[keypart];
}
}), Collection._noCreateModifiers = {$unset: true, $pop: true, $rename: true, $pull: true, $pullAll: true}, Collection._modifiers = {$inc: (function (target, field, arg) {
  _$jscoverage['monglo.min.js'][7]++;
  if (typeof arg != "number") {
    _$jscoverage['monglo.min.js'][7]++;
    throw Error("Modifier $inc allowed for numbers only");
  }
  _$jscoverage['monglo.min.js'][7]++;
  if (field in target) {
    _$jscoverage['monglo.min.js'][7]++;
    if (typeof target[field] != "number") {
      _$jscoverage['monglo.min.js'][7]++;
      throw Error("Cannot apply $inc modifier to non-number");
    }
    _$jscoverage['monglo.min.js'][7]++;
    target[field] += arg;
  }
  else {
    _$jscoverage['monglo.min.js'][7]++;
    target[field] = arg;
  }
}), $set: (function (target, field, arg) {
  _$jscoverage['monglo.min.js'][7]++;
  target[field] = Collection._deepcopy(arg);
}), $unset: (function (target, field, arg) {
  _$jscoverage['monglo.min.js'][7]++;
  target !== undefined && (target instanceof Array? field in target && (target[field] = null): delete target[field]);
}), $push: (function (target, field, arg) {
  _$jscoverage['monglo.min.js'][7]++;
  var x = target[field];
  _$jscoverage['monglo.min.js'][7]++;
  if (x === undefined) {
    _$jscoverage['monglo.min.js'][7]++;
    target[field] = [arg];
  }
  else {
    _$jscoverage['monglo.min.js'][7]++;
    if (! (x instanceof Array)) {
      _$jscoverage['monglo.min.js'][7]++;
      throw Error("Cannot apply $push modifier to non-array");
    }
    _$jscoverage['monglo.min.js'][7]++;
    x.push(Collection._deepcopy(arg));
  }
}), $pushAll: (function (target, field, arg) {
  _$jscoverage['monglo.min.js'][7]++;
  if (! (typeof arg == "object" && arg instanceof Array)) {
    _$jscoverage['monglo.min.js'][7]++;
    throw Error("Modifier $pushAll/pullAll allowed for arrays only");
  }
  _$jscoverage['monglo.min.js'][7]++;
  var x = target[field];
  _$jscoverage['monglo.min.js'][7]++;
  if (x === undefined) {
    _$jscoverage['monglo.min.js'][7]++;
    target[field] = arg;
  }
  else {
    _$jscoverage['monglo.min.js'][7]++;
    if (! (x instanceof Array)) {
      _$jscoverage['monglo.min.js'][7]++;
      throw Error("Cannot apply $pushAll modifier to non-array");
    }
    _$jscoverage['monglo.min.js'][7]++;
    for (var i = 0; i < arg.length; i++) {
      _$jscoverage['monglo.min.js'][7]++;
      x.push(arg[i]);
}
  }
}), $addToSet: (function (target, field, arg) {
  _$jscoverage['monglo.min.js'][7]++;
  var x = target[field];
  _$jscoverage['monglo.min.js'][7]++;
  if (x === undefined) {
    _$jscoverage['monglo.min.js'][7]++;
    target[field] = [arg];
  }
  else {
    _$jscoverage['monglo.min.js'][7]++;
    if (! (x instanceof Array)) {
      _$jscoverage['monglo.min.js'][7]++;
      throw Error("Cannot apply $addToSet modifier to non-array");
    }
    _$jscoverage['monglo.min.js'][7]++;
    var isEach = false;
    _$jscoverage['monglo.min.js'][7]++;
    if (typeof arg == "object") {
      _$jscoverage['monglo.min.js'][7]++;
      for (var k in arg) {
        _$jscoverage['monglo.min.js'][7]++;
        k === "$each" && (isEach = true);
        _$jscoverage['monglo.min.js'][7]++;
        break;
}
    }
    _$jscoverage['monglo.min.js'][7]++;
    var values = isEach? arg.$each: [arg];
    _$jscoverage['monglo.min.js'][7]++;
    _.each(values, (function (value) {
  _$jscoverage['monglo.min.js'][7]++;
  for (var i = 0; i < x.length; i++) {
    _$jscoverage['monglo.min.js'][7]++;
    if (Collection._f._equal(value, x[i])) {
      _$jscoverage['monglo.min.js'][7]++;
      return;
    }
}
  _$jscoverage['monglo.min.js'][7]++;
  x.push(value);
}));
  }
}), $pop: (function (target, field, arg) {
  _$jscoverage['monglo.min.js'][7]++;
  if (target === undefined) {
    _$jscoverage['monglo.min.js'][7]++;
    return;
  }
  _$jscoverage['monglo.min.js'][7]++;
  var x = target[field];
  _$jscoverage['monglo.min.js'][7]++;
  if (x === undefined) {
    _$jscoverage['monglo.min.js'][7]++;
    return;
  }
  _$jscoverage['monglo.min.js'][7]++;
  if (! (x instanceof Array)) {
    _$jscoverage['monglo.min.js'][7]++;
    throw Error("Cannot apply $pop modifier to non-array");
  }
  _$jscoverage['monglo.min.js'][7]++;
  typeof arg == "number" && arg < 0? x.splice(0, 1): x.pop();
}), $pull: (function (target, field, arg) {
  _$jscoverage['monglo.min.js'][7]++;
  if (target === undefined) {
    _$jscoverage['monglo.min.js'][7]++;
    return;
  }
  _$jscoverage['monglo.min.js'][7]++;
  var x = target[field];
  _$jscoverage['monglo.min.js'][7]++;
  if (x === undefined) {
    _$jscoverage['monglo.min.js'][7]++;
    return;
  }
  _$jscoverage['monglo.min.js'][7]++;
  if (! (x instanceof Array)) {
    _$jscoverage['monglo.min.js'][7]++;
    throw Error("Cannot apply $pull/pullAll modifier to non-array");
  }
  _$jscoverage['monglo.min.js'][7]++;
  var out = [];
  _$jscoverage['monglo.min.js'][7]++;
  if (typeof arg != "object" || arg instanceof Array) {
    _$jscoverage['monglo.min.js'][7]++;
    for (var i = 0; i < x.length; i++) {
      _$jscoverage['monglo.min.js'][7]++;
      Collection._f._equal(x[i], arg) || out.push(x[i]);
}
  }
  else {
    _$jscoverage['monglo.min.js'][7]++;
    var match = Collection._compileSelector(arg);
    _$jscoverage['monglo.min.js'][7]++;
    for (var i = 0; i < x.length; i++) {
      _$jscoverage['monglo.min.js'][7]++;
      match(x[i]) || out.push(x[i]);
}
  }
  _$jscoverage['monglo.min.js'][7]++;
  target[field] = out;
}), $pullAll: (function (target, field, arg) {
  _$jscoverage['monglo.min.js'][7]++;
  if (! (typeof arg == "object" && arg instanceof Array)) {
    _$jscoverage['monglo.min.js'][7]++;
    throw Error("Modifier $pushAll/pullAll allowed for arrays only");
  }
  _$jscoverage['monglo.min.js'][7]++;
  if (target === undefined) {
    _$jscoverage['monglo.min.js'][7]++;
    return;
  }
  _$jscoverage['monglo.min.js'][7]++;
  var x = target[field];
  _$jscoverage['monglo.min.js'][7]++;
  if (x === undefined) {
    _$jscoverage['monglo.min.js'][7]++;
    return;
  }
  _$jscoverage['monglo.min.js'][7]++;
  if (! (x instanceof Array)) {
    _$jscoverage['monglo.min.js'][7]++;
    throw Error("Cannot apply $pull/pullAll modifier to non-array");
  }
  _$jscoverage['monglo.min.js'][7]++;
  var out = [];
  _$jscoverage['monglo.min.js'][7]++;
  for (var i = 0; i < x.length; i++) {
    _$jscoverage['monglo.min.js'][7]++;
    var exclude = false;
    _$jscoverage['monglo.min.js'][7]++;
    for (var j = 0; j < arg.length; j++) {
      _$jscoverage['monglo.min.js'][7]++;
      if (Collection._f._equal(x[i], arg[j])) {
        _$jscoverage['monglo.min.js'][7]++;
        exclude = true;
        _$jscoverage['monglo.min.js'][7]++;
        break;
      }
}
    _$jscoverage['monglo.min.js'][7]++;
    exclude || out.push(x[i]);
}
  _$jscoverage['monglo.min.js'][7]++;
  target[field] = out;
}), $rename: (function (target, field, arg, keypath, doc) {
  _$jscoverage['monglo.min.js'][7]++;
  if (keypath === arg) {
    _$jscoverage['monglo.min.js'][7]++;
    throw Error("$rename source must differ from target");
  }
  _$jscoverage['monglo.min.js'][7]++;
  if (target === null) {
    _$jscoverage['monglo.min.js'][7]++;
    throw Error("$rename source field invalid");
  }
  _$jscoverage['monglo.min.js'][7]++;
  if (typeof arg != "string") {
    _$jscoverage['monglo.min.js'][7]++;
    throw Error("$rename target must be a string");
  }
  _$jscoverage['monglo.min.js'][7]++;
  if (target === undefined) {
    _$jscoverage['monglo.min.js'][7]++;
    return;
  }
  _$jscoverage['monglo.min.js'][7]++;
  var v = target[field];
  _$jscoverage['monglo.min.js'][7]++;
  delete target[field];
  _$jscoverage['monglo.min.js'][7]++;
  var keyparts = arg.split("."), target2 = Collection._findModTarget(doc, keyparts, false, true);
  _$jscoverage['monglo.min.js'][7]++;
  if (target2 === null) {
    _$jscoverage['monglo.min.js'][7]++;
    throw Error("$rename target field invalid");
  }
  _$jscoverage['monglo.min.js'][7]++;
  var field2 = keyparts.pop();
  _$jscoverage['monglo.min.js'][7]++;
  target2[field2] = v;
}), $bit: (function (target, field, arg) {
  _$jscoverage['monglo.min.js'][7]++;
  throw Error("$bit is not supported");
})};
_$jscoverage['monglo.min.js'][7]++;
var Selector = {};
_$jscoverage['monglo.min.js'][7]++;
Selector._f = {_all: (function (x, qval) {
  _$jscoverage['monglo.min.js'][7]++;
  if (x instanceof Array) {
    _$jscoverage['monglo.min.js'][7]++;
    var parts = {}, remaining = 0;
    _$jscoverage['monglo.min.js'][7]++;
    utils.each(qval, (function (q) {
  _$jscoverage['monglo.min.js'][7]++;
  var hash = JSON.stringify(q);
  _$jscoverage['monglo.min.js'][7]++;
  hash in parts || (parts[hash] = true, remaining++);
}));
    _$jscoverage['monglo.min.js'][7]++;
    for (var i = 0; i < x.length; i++) {
      _$jscoverage['monglo.min.js'][7]++;
      var hash = JSON.stringify(x[i]);
      _$jscoverage['monglo.min.js'][7]++;
      if (parts[hash]) {
        _$jscoverage['monglo.min.js'][7]++;
        delete parts[hash], remaining--;
        _$jscoverage['monglo.min.js'][7]++;
        if (0 === remaining) {
          _$jscoverage['monglo.min.js'][7]++;
          return true;
        }
      }
}
    _$jscoverage['monglo.min.js'][7]++;
    return false;
  }
  _$jscoverage['monglo.min.js'][7]++;
  return false;
}), _in: (function (x, qval) {
  _$jscoverage['monglo.min.js'][7]++;
  if (typeof x != "object") {
    _$jscoverage['monglo.min.js'][7]++;
    for (var i = 0; i < qval.length; i++) {
      _$jscoverage['monglo.min.js'][7]++;
      if (x === qval[i]) {
        _$jscoverage['monglo.min.js'][7]++;
        return true;
      }
}
    _$jscoverage['monglo.min.js'][7]++;
    return false;
  }
  _$jscoverage['monglo.min.js'][7]++;
  for (var i = 0; i < qval.length; i++) {
    _$jscoverage['monglo.min.js'][7]++;
    if (Selector._f._equal(x, qval[i])) {
      _$jscoverage['monglo.min.js'][7]++;
      return true;
    }
}
  _$jscoverage['monglo.min.js'][7]++;
  return false;
}), _type: (function (v) {
  _$jscoverage['monglo.min.js'][7]++;
  return typeof v == "number"? 1: typeof v == "string"? 2: typeof v == "boolean"? 8: v instanceof Array? 4: v === null? 10: v instanceof RegExp? 11: typeof v == "function"? 13: 3;
}), _equal: (function (x, qval) {
  _$jscoverage['monglo.min.js'][7]++;
  var match = (function (a, b) {
  _$jscoverage['monglo.min.js'][7]++;
  if (typeof a == "number" || typeof a == "string" || typeof a == "boolean" || a === undefined || a === null) {
    _$jscoverage['monglo.min.js'][7]++;
    return a === b;
  }
  _$jscoverage['monglo.min.js'][7]++;
  if (typeof a == "function") {
    _$jscoverage['monglo.min.js'][7]++;
    return false;
  }
  _$jscoverage['monglo.min.js'][7]++;
  if (typeof b != "object") {
    _$jscoverage['monglo.min.js'][7]++;
    return false;
  }
  _$jscoverage['monglo.min.js'][7]++;
  if (a instanceof Array) {
    _$jscoverage['monglo.min.js'][7]++;
    if (b instanceof Array) {
      _$jscoverage['monglo.min.js'][7]++;
      if (a.length !== b.length) {
        _$jscoverage['monglo.min.js'][7]++;
        return false;
      }
      _$jscoverage['monglo.min.js'][7]++;
      for (var i = 0; i < a.length; i++) {
        _$jscoverage['monglo.min.js'][7]++;
        if (! match(a[i], b[i])) {
          _$jscoverage['monglo.min.js'][7]++;
          return false;
        }
}
      _$jscoverage['monglo.min.js'][7]++;
      return true;
    }
    _$jscoverage['monglo.min.js'][7]++;
    return false;
  }
  _$jscoverage['monglo.min.js'][7]++;
  var b_keys = [];
  _$jscoverage['monglo.min.js'][7]++;
  for (var x in b) {
    _$jscoverage['monglo.min.js'][7]++;
    b_keys.push(b[x]);
}
  _$jscoverage['monglo.min.js'][7]++;
  var i = 0;
  _$jscoverage['monglo.min.js'][7]++;
  for (var x in a) {
    _$jscoverage['monglo.min.js'][7]++;
    if (i >= b_keys.length) {
      _$jscoverage['monglo.min.js'][7]++;
      return false;
    }
    _$jscoverage['monglo.min.js'][7]++;
    if (! match(a[x], b_keys[i])) {
      _$jscoverage['monglo.min.js'][7]++;
      return false;
    }
    _$jscoverage['monglo.min.js'][7]++;
    i++;
}
  _$jscoverage['monglo.min.js'][7]++;
  return i !== b_keys.length? false: true;
});
  _$jscoverage['monglo.min.js'][7]++;
  return match(x, qval);
}), _matches: (function (x, f) {
  _$jscoverage['monglo.min.js'][7]++;
  if (x instanceof Array) {
    _$jscoverage['monglo.min.js'][7]++;
    for (var i = 0; i < x.length; i++) {
      _$jscoverage['monglo.min.js'][7]++;
      if (f(x[i])) {
        _$jscoverage['monglo.min.js'][7]++;
        return true;
      }
}
    _$jscoverage['monglo.min.js'][7]++;
    return false;
  }
  _$jscoverage['monglo.min.js'][7]++;
  return f(x);
}), _matches_plus: (function (x, f) {
  _$jscoverage['monglo.min.js'][7]++;
  if (x instanceof Array) {
    _$jscoverage['monglo.min.js'][7]++;
    for (var i = 0; i < x.length; i++) {
      _$jscoverage['monglo.min.js'][7]++;
      if (f(x[i])) {
        _$jscoverage['monglo.min.js'][7]++;
        return true;
      }
}
  }
  _$jscoverage['monglo.min.js'][7]++;
  return f(x);
}), _typeorder: (function (t) {
  _$jscoverage['monglo.min.js'][7]++;
  return [-1, 1, 2, 3, 4, 5, -1, 6, 7, 8, 0, 9, -1, 100, 2, 100, 1, 8, 1][t];
}), _cmp: (function (a, b) {
  _$jscoverage['monglo.min.js'][7]++;
  if (a === undefined) {
    _$jscoverage['monglo.min.js'][7]++;
    return b === undefined? 0: -1;
  }
  _$jscoverage['monglo.min.js'][7]++;
  if (b === undefined) {
    _$jscoverage['monglo.min.js'][7]++;
    return 1;
  }
  _$jscoverage['monglo.min.js'][7]++;
  var ta = Selector._f._type(a), tb = Selector._f._type(b), oa = Selector._f._typeorder(ta), ob = Selector._f._typeorder(tb);
  _$jscoverage['monglo.min.js'][7]++;
  if (oa !== ob) {
    _$jscoverage['monglo.min.js'][7]++;
    return oa < ob? -1: 1;
  }
  _$jscoverage['monglo.min.js'][7]++;
  if (ta !== tb) {
    _$jscoverage['monglo.min.js'][7]++;
    throw Error("Missing type coercion logic in _cmp");
  }
  _$jscoverage['monglo.min.js'][7]++;
  if (ta === 1) {
    _$jscoverage['monglo.min.js'][7]++;
    return a - b;
  }
  _$jscoverage['monglo.min.js'][7]++;
  if (tb === 2) {
    _$jscoverage['monglo.min.js'][7]++;
    return a < b? -1: a === b? 0: 1;
  }
  _$jscoverage['monglo.min.js'][7]++;
  if (ta === 3) {
    _$jscoverage['monglo.min.js'][7]++;
    var to_array = (function (obj) {
  _$jscoverage['monglo.min.js'][7]++;
  var ret = [];
  _$jscoverage['monglo.min.js'][7]++;
  for (var key in obj) {
    _$jscoverage['monglo.min.js'][7]++;
    ret.push(key), ret.push(obj[key]);
}
  _$jscoverage['monglo.min.js'][7]++;
  return ret;
});
    _$jscoverage['monglo.min.js'][7]++;
    return Selector._f._cmp(to_array(a), to_array(b));
  }
  _$jscoverage['monglo.min.js'][7]++;
  if (ta === 4) {
    _$jscoverage['monglo.min.js'][7]++;
    for (var i = 0;; i++) {
      _$jscoverage['monglo.min.js'][7]++;
      if (i === a.length) {
        _$jscoverage['monglo.min.js'][7]++;
        return i === b.length? 0: -1;
      }
      _$jscoverage['monglo.min.js'][7]++;
      if (i === b.length) {
        _$jscoverage['monglo.min.js'][7]++;
        return 1;
      }
      _$jscoverage['monglo.min.js'][7]++;
      var s = Selector._f._cmp(a[i], b[i]);
      _$jscoverage['monglo.min.js'][7]++;
      if (s !== 0) {
        _$jscoverage['monglo.min.js'][7]++;
        return s;
      }
}
  }
  _$jscoverage['monglo.min.js'][7]++;
  if (ta === 8) {
    _$jscoverage['monglo.min.js'][7]++;
    return a? b? 0: 1: b? -1: 0;
  }
  _$jscoverage['monglo.min.js'][7]++;
  if (ta === 10) {
    _$jscoverage['monglo.min.js'][7]++;
    return 0;
  }
  _$jscoverage['monglo.min.js'][7]++;
  if (ta === 11) {
    _$jscoverage['monglo.min.js'][7]++;
    throw Error("Sorting not supported on regular expression");
  }
  _$jscoverage['monglo.min.js'][7]++;
  if (ta === 13) {
    _$jscoverage['monglo.min.js'][7]++;
    throw Error("Sorting not supported on Javascript code");
  }
})}, Selector._matches = (function (selector, doc) {
  _$jscoverage['monglo.min.js'][7]++;
  return Selector._compileSelector(selector)(doc);
}), Selector._compileSelector = (function (selector) {
  _$jscoverage['monglo.min.js'][7]++;
  var literals = [];
  _$jscoverage['monglo.min.js'][7]++;
  if (selector instanceof Function) {
    _$jscoverage['monglo.min.js'][7]++;
    return (function (doc) {
  _$jscoverage['monglo.min.js'][7]++;
  return selector.call(doc);
});
  }
  _$jscoverage['monglo.min.js'][7]++;
  if (typeof selector == "string" || typeof selector == "number") {
    _$jscoverage['monglo.min.js'][7]++;
    selector = {_id: selector};
  }
  _$jscoverage['monglo.min.js'][7]++;
  if (! selector || "_id" in selector && ! selector._id) {
    _$jscoverage['monglo.min.js'][7]++;
    return (function (doc) {
  _$jscoverage['monglo.min.js'][7]++;
  return false;
});
  }
  _$jscoverage['monglo.min.js'][7]++;
  var _func;
  _$jscoverage['monglo.min.js'][7]++;
  return eval("_func = (function(f,literals){return function(doc){return " + Selector._exprForSelector(selector, literals) + ";};})"), _func(Selector._f, literals);
}), Selector._exprForSelector = (function (selector, literals) {
  _$jscoverage['monglo.min.js'][7]++;
  var clauses = [];
  _$jscoverage['monglo.min.js'][7]++;
  for (var key in selector) {
    _$jscoverage['monglo.min.js'][7]++;
    var value = selector[key];
    _$jscoverage['monglo.min.js'][7]++;
    key.substr(0, 1) === "$"? clauses.push(Selector._exprForDocumentPredicate(key, value, literals)): clauses.push(Selector._exprForKeypathPredicate(key, value, literals));
}
  _$jscoverage['monglo.min.js'][7]++;
  return clauses.length === 0? "true": "(" + clauses.join("&&") + ")";
}), Selector._exprForDocumentPredicate = (function (op, value, literals) {
  _$jscoverage['monglo.min.js'][7]++;
  if (op === "$or") {
    _$jscoverage['monglo.min.js'][7]++;
    var clauses = [];
    _$jscoverage['monglo.min.js'][7]++;
    return utils.each(value, (function (c) {
  _$jscoverage['monglo.min.js'][7]++;
  clauses.push(Selector._exprForSelector(c, literals));
})), clauses.length === 0? "true": "(" + clauses.join("||") + ")";
  }
  _$jscoverage['monglo.min.js'][7]++;
  if (op === "$and") {
    _$jscoverage['monglo.min.js'][7]++;
    var clauses = [];
    _$jscoverage['monglo.min.js'][7]++;
    return utils.each(value, (function (c) {
  _$jscoverage['monglo.min.js'][7]++;
  clauses.push(Selector._exprForSelector(c, literals));
})), clauses.length === 0? "true": "(" + clauses.join("&&") + ")";
  }
  _$jscoverage['monglo.min.js'][7]++;
  if (op === "$nor") {
    _$jscoverage['monglo.min.js'][7]++;
    var clauses = [];
    _$jscoverage['monglo.min.js'][7]++;
    return utils.each(value, (function (c) {
  _$jscoverage['monglo.min.js'][7]++;
  clauses.push("!(" + Selector._exprForSelector(c, literals) + ")");
})), clauses.length === 0? "true": "(" + clauses.join("&&") + ")";
  }
  _$jscoverage['monglo.min.js'][7]++;
  if (op === "$where") {
    _$jscoverage['monglo.min.js'][7]++;
    return value instanceof Function? (literals.push(value), "literals[" + (literals.length - 1) + "].call(doc)"): "(function(){return " + value + ";}).call(doc)";
  }
  _$jscoverage['monglo.min.js'][7]++;
  throw Error("Unrecogized key in selector: ", op);
}), Selector._exprForKeypathPredicate = (function (keypath, value, literals) {
  _$jscoverage['monglo.min.js'][7]++;
  var keyparts = keypath.split("."), predcode = "";
  _$jscoverage['monglo.min.js'][7]++;
  if (value instanceof RegExp) {
    _$jscoverage['monglo.min.js'][7]++;
    predcode = Selector._exprForOperatorTest(value, literals);
  }
  else {
    _$jscoverage['monglo.min.js'][7]++;
    if (typeof value != "object" || value === null || value instanceof Array) {
      _$jscoverage['monglo.min.js'][7]++;
      predcode = Selector._exprForValueTest(value, literals);
    }
    else {
      _$jscoverage['monglo.min.js'][7]++;
      var is_literal = true;
      _$jscoverage['monglo.min.js'][7]++;
      for (var k in value) {
        _$jscoverage['monglo.min.js'][7]++;
        if (k.substr(0, 1) === "$") {
          _$jscoverage['monglo.min.js'][7]++;
          is_literal = false;
          _$jscoverage['monglo.min.js'][7]++;
          break;
        }
}
      _$jscoverage['monglo.min.js'][7]++;
      is_literal? predcode = Selector._exprForValueTest(value, literals): predcode = Selector._exprForOperatorTest(value, literals);
    }
  }
  _$jscoverage['monglo.min.js'][7]++;
  var ret = "", innermost = true;
  _$jscoverage['monglo.min.js'][7]++;
  while (keyparts.length) {
    _$jscoverage['monglo.min.js'][7]++;
    var part = keyparts.pop(), formal = keyparts.length? "x": "doc";
    _$jscoverage['monglo.min.js'][7]++;
    innermost? (ret = "(function(x){return " + predcode + ";})(" + formal + "&&" + formal + "[" + JSON.stringify(part) + "])", innermost = false): ret = "f._matches(" + formal + "&&" + formal + "[" + JSON.stringify(part) + "], function(x){return " + ret + ";})";
}
  _$jscoverage['monglo.min.js'][7]++;
  return ret;
}), Selector._exprForValueTest = (function (value, literals) {
  _$jscoverage['monglo.min.js'][7]++;
  var expr;
  _$jscoverage['monglo.min.js'][7]++;
  if (value === null) {
    _$jscoverage['monglo.min.js'][7]++;
    expr = "x===null||x===undefined";
  }
  else {
    _$jscoverage['monglo.min.js'][7]++;
    if (typeof value == "string" || typeof value == "number" || typeof value == "boolean") {
      _$jscoverage['monglo.min.js'][7]++;
      expr = "x===" + JSON.stringify(value);
    }
    else {
      _$jscoverage['monglo.min.js'][7]++;
      if (typeof value == "function") {
        _$jscoverage['monglo.min.js'][7]++;
        throw Error("Bad value type in query");
      }
      _$jscoverage['monglo.min.js'][7]++;
      expr = "f._equal(x," + JSON.stringify(value) + ")";
    }
  }
  _$jscoverage['monglo.min.js'][7]++;
  return "f._matches_plus(x,function(x){return " + expr + ";})";
}), Selector._exprForOperatorTest = (function (op, literals) {
  _$jscoverage['monglo.min.js'][7]++;
  if (op instanceof RegExp) {
    _$jscoverage['monglo.min.js'][7]++;
    return Selector._exprForOperatorTest({$regex: op}, literals);
  }
  _$jscoverage['monglo.min.js'][7]++;
  var clauses = [];
  _$jscoverage['monglo.min.js'][7]++;
  for (var type in op) {
    _$jscoverage['monglo.min.js'][7]++;
    clauses.push(Selector._exprForConstraint(type, op[type], op, literals));
}
  _$jscoverage['monglo.min.js'][7]++;
  return clauses.length === 0? "true": "(" + clauses.join("&&") + ")";
}), Selector._exprForConstraint = (function (type, arg, others, literals) {
  _$jscoverage['monglo.min.js'][7]++;
  var expr, search = "_matches", negate = false;
  _$jscoverage['monglo.min.js'][7]++;
  if (type === "$gt") {
    _$jscoverage['monglo.min.js'][7]++;
    expr = "f._cmp(x," + JSON.stringify(arg) + ")>0";
  }
  else {
    _$jscoverage['monglo.min.js'][7]++;
    if (type === "$lt") {
      _$jscoverage['monglo.min.js'][7]++;
      expr = "f._cmp(x," + JSON.stringify(arg) + ")<0";
    }
    else {
      _$jscoverage['monglo.min.js'][7]++;
      if (type === "$gte") {
        _$jscoverage['monglo.min.js'][7]++;
        expr = "f._cmp(x," + JSON.stringify(arg) + ")>=0";
      }
      else {
        _$jscoverage['monglo.min.js'][7]++;
        if (type === "$lte") {
          _$jscoverage['monglo.min.js'][7]++;
          expr = "f._cmp(x," + JSON.stringify(arg) + ")<=0";
        }
        else {
          _$jscoverage['monglo.min.js'][7]++;
          if (type === "$all") {
            _$jscoverage['monglo.min.js'][7]++;
            expr = "f._all(x," + JSON.stringify(arg) + ")", search = null;
          }
          else {
            _$jscoverage['monglo.min.js'][7]++;
            if (type === "$exists") {
              _$jscoverage['monglo.min.js'][7]++;
              arg? expr = "x!==undefined": expr = "x===undefined", search = null;
            }
            else {
              _$jscoverage['monglo.min.js'][7]++;
              if (type === "$mod") {
                _$jscoverage['monglo.min.js'][7]++;
                expr = "x%" + JSON.stringify(arg[0]) + "===" + JSON.stringify(arg[1]);
              }
              else {
                _$jscoverage['monglo.min.js'][7]++;
                if (type === "$ne") {
                  _$jscoverage['monglo.min.js'][7]++;
                  typeof arg != "object"? expr = "x===" + JSON.stringify(arg): expr = "f._equal(x," + JSON.stringify(arg) + ")", search = "_matches_plus", negate = true;
                }
                else {
                  _$jscoverage['monglo.min.js'][7]++;
                  if (type === "$in") {
                    _$jscoverage['monglo.min.js'][7]++;
                    expr = "f._in(x," + JSON.stringify(arg) + ")", search = "_matches_plus";
                  }
                  else {
                    _$jscoverage['monglo.min.js'][7]++;
                    if (type === "$nin") {
                      _$jscoverage['monglo.min.js'][7]++;
                      expr = "f._in(x," + JSON.stringify(arg) + ")", search = "_matches_plus", negate = true;
                    }
                    else {
                      _$jscoverage['monglo.min.js'][7]++;
                      if (type === "$size") {
                        _$jscoverage['monglo.min.js'][7]++;
                        expr = "(x instanceof Array)&&x.length===" + arg, search = null;
                      }
                      else {
                        _$jscoverage['monglo.min.js'][7]++;
                        if (type === "$type") {
                          _$jscoverage['monglo.min.js'][7]++;
                          expr = "f._type(x)===" + JSON.stringify(arg);
                        }
                        else {
                          _$jscoverage['monglo.min.js'][7]++;
                          if (type === "$regex") {
                            _$jscoverage['monglo.min.js'][7]++;
                            if ("$options" in others && /[^gim]/.test(others.$options)) {
                              _$jscoverage['monglo.min.js'][7]++;
                              throw Error("Only the i, m, and g regexp options are supported");
                            }
                            _$jscoverage['monglo.min.js'][7]++;
                            expr = "literals[" + literals.length + "].test(x)", arg instanceof RegExp? "$options" in others? literals.push(new RegExp(arg.source, others.$options)): literals.push(arg): literals.push(new RegExp(arg, others.$options));
                          }
                          else {
                            _$jscoverage['monglo.min.js'][7]++;
                            if (type === "$options") {
                              _$jscoverage['monglo.min.js'][7]++;
                              expr = "true", search = null;
                            }
                            else {
                              _$jscoverage['monglo.min.js'][7]++;
                              if (type === "$elemMatch") {
                                _$jscoverage['monglo.min.js'][7]++;
                                throw Error("$elemMatch unimplemented");
                              }
                              _$jscoverage['monglo.min.js'][7]++;
                              if (type !== "$not") {
                                _$jscoverage['monglo.min.js'][7]++;
                                throw Error("Unrecognized key in selector: " + type);
                              }
                              _$jscoverage['monglo.min.js'][7]++;
                              expr = "!" + Selector._exprForOperatorTest(arg, literals), search = null;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  _$jscoverage['monglo.min.js'][7]++;
  return search && (expr = "f." + search + "(x,function(x){return " + expr + ";})"), negate && (expr = "!" + expr), expr;
}), Collection._compileSort = (function (spec) {
  _$jscoverage['monglo.min.js'][7]++;
  var keys = [], asc = [];
  _$jscoverage['monglo.min.js'][7]++;
  if (spec instanceof Array) {
    _$jscoverage['monglo.min.js'][7]++;
    for (var i = 0; i < spec.length; i++) {
      _$jscoverage['monglo.min.js'][7]++;
      typeof spec[i] == "string"? (keys.push(spec[i]), asc.push(true)): (keys.push(spec[i][0]), asc.push(spec[i][1] !== "desc"));
}
  }
  else {
    _$jscoverage['monglo.min.js'][7]++;
    if (typeof spec != "object") {
      _$jscoverage['monglo.min.js'][7]++;
      throw Error("Bad sort specification: ", JSON.stringify(spec));
    }
    _$jscoverage['monglo.min.js'][7]++;
    for (key in spec) {
      _$jscoverage['monglo.min.js'][7]++;
      keys.push(key), asc.push(! (spec[key] < 0));
}
  }
  _$jscoverage['monglo.min.js'][7]++;
  if (keys.length === 0) {
    _$jscoverage['monglo.min.js'][7]++;
    return (function () {
  _$jscoverage['monglo.min.js'][7]++;
  return 0;
});
  }
  _$jscoverage['monglo.min.js'][7]++;
  var _func, code = "_func = (function(c){return function(a,b){var x;";
  _$jscoverage['monglo.min.js'][7]++;
  for (var i = 0; i < keys.length; i++) {
    _$jscoverage['monglo.min.js'][7]++;
    i !== 0 && (code += "if(x!==0)return x;"), code += "x=" + (asc[i]? "": "-") + "c(a[" + JSON.stringify(keys[i]) + "],b[" + JSON.stringify(keys[i]) + "]);";
}
  _$jscoverage['monglo.min.js'][7]++;
  return code += "return x;};})", eval(code), _func(Collection._f._cmp);
});
_$jscoverage['monglo.min.js'][7]++;
var Utils = {};
_$jscoverage['monglo.min.js'][7]++;
Utils._deepcopy = (function (v) {
  _$jscoverage['monglo.min.js'][7]++;
  if (typeof v != "object") {
    _$jscoverage['monglo.min.js'][7]++;
    return v;
  }
  _$jscoverage['monglo.min.js'][7]++;
  if (v === null) {
    _$jscoverage['monglo.min.js'][7]++;
    return null;
  }
  _$jscoverage['monglo.min.js'][7]++;
  if (utils.isArray(v)) {
    _$jscoverage['monglo.min.js'][7]++;
    var ret = v.slice(0);
    _$jscoverage['monglo.min.js'][7]++;
    for (var i = 0; i < v.length; i++) {
      _$jscoverage['monglo.min.js'][7]++;
      ret[i] = Utils._deepcopy(ret[i]);
}
    _$jscoverage['monglo.min.js'][7]++;
    return ret;
  }
  _$jscoverage['monglo.min.js'][7]++;
  var ret = {};
  _$jscoverage['monglo.min.js'][7]++;
  for (var key in v) {
    _$jscoverage['monglo.min.js'][7]++;
    ret[key] = Utils._deepcopy(v[key]);
}
  _$jscoverage['monglo.min.js'][7]++;
  return ret;
}), Utils.each = Utils.forEach = (function (obj, iterator, context) {
  _$jscoverage['monglo.min.js'][7]++;
  if (obj === null) {
    _$jscoverage['monglo.min.js'][7]++;
    return;
  }
  _$jscoverage['monglo.min.js'][7]++;
  var nativeForEach = Array.prototype.forEach;
  _$jscoverage['monglo.min.js'][7]++;
  if (nativeForEach && obj.forEach === nativeForEach) {
    _$jscoverage['monglo.min.js'][7]++;
    obj.forEach(iterator, context);
  }
  else {
    _$jscoverage['monglo.min.js'][7]++;
    if (obj.length === + obj.length) {
      _$jscoverage['monglo.min.js'][7]++;
      for (var i = 0, l = obj.length; i < l; i++) {
        _$jscoverage['monglo.min.js'][7]++;
        if (iterator.call(context, obj[i], i, obj) === breaker) {
          _$jscoverage['monglo.min.js'][7]++;
          return;
        }
}
    }
    else {
      _$jscoverage['monglo.min.js'][7]++;
      for (var key in obj) {
        _$jscoverage['monglo.min.js'][7]++;
        if (_.has(obj, key) && iterator.call(context, obj[key], key, obj) === breaker) {
          _$jscoverage['monglo.min.js'][7]++;
          return;
        }
}
    }
  }
}), Utils.isArray = Array.isArray || (function (obj) {
  _$jscoverage['monglo.min.js'][7]++;
  return toString.call(obj) == "[object Array]";
}), Utils.debug = (function (data) {
});
_$jscoverage['monglo.min.js'][7]++;
var utils = Utils;
_$jscoverage['monglo.min.js'].source = ["// XXX type checking on selectors (graceful error if malformed)","// Collection: a set of documents that supports queries and modifiers.","// Cursor: a specification for a particular subset of documents, w/","// a defined order, limit, and offset.  creating a Cursor with Collection.find(),","// LiveResultsSet: the return value of a live query.","function Collection(db,collectionName,pkFactory,options){if(!(this instanceof Collection))return new Collection(db,collectionName,pkFactory,options);checkCollectionName(collectionName),this.db=db,this.collectionName=collectionName,this.docs={},this.snapshots=[],this.opts=options!=null&amp;&amp;\"object\"==typeof options?options:{};var self=this}function Cursor(db,collection,selector,fields,skip,limit,sort){this.db=db,this.collection=collection,this.selector=selector,this.fields=fields,this.skipValue=skip===null?0:skip,this.limitValue=limit===null?0:limit,this.sortValue=sort,typeof this.selector==\"string\"||typeof this.selector==\"number\"?(this.selector_id=this.selector,this.selector_f=Selector._compileSelector(this.selector)):(this.selector_f=Selector._compileSelector(this.selector),this.sort_f=this.sortValue?Collection._compileSort(this.sortValue):null),this.db_objects=null,this.cursor_pos=0}function validateDatabaseName(databaseName){if(typeof databaseName!=\"string\")throw new Error(\"database name must be a string\");if(databaseName.length===0)throw new Error(\"database name cannot be the empty string\");var invalidChars=[\" \",\".\",\"$\",\"/\",\"\\\\\"];for(var i=0;i&lt;invalidChars.length;i++)if(databaseName.indexOf(invalidChars[i])!=-1)throw new Error(\"database names cannot contain the character '\"+invalidChars[i]+\"'\")}function BinaryParser(bigEndian,allowExceptions){if(!(this instanceof BinaryParser))return new BinaryParser(bigEndian,allowExceptions);this.bigEndian=bigEndian,this.allowExceptions=allowExceptions}function BinaryParserBuffer(bigEndian,buffer){this.bigEndian=bigEndian||0,this.buffer=[],this.setBuffer(buffer)}function EventEmitter(){}Collection.prototype.__proto__=EventEmitter.prototype,Collection.prototype.constructor=Collection;var testForFields={limit:1,sort:1,fields:1,skip:1,hint:1,explain:1,snapshot:1,timeout:1,tailable:1,batchSize:1,raw:1,read:1,returnKey:1,maxScan:1,min:1,max:1,showDiskLoc:1,comment:1,dbName:1,exhaust:1,tailableRetryInterval:1};Collection.prototype.find=function(){var self=this,options,args=Array.prototype.slice.call(arguments,0),has_callback=typeof args[args.length-1]==\"function\",has_weird_callback=typeof args[0]==\"function\",callback=has_callback?args.pop():has_weird_callback?args.shift():null,len=args.length,selector=len&gt;=1?args[0]:{},fields=len&gt;=2?args[1]:undefined;len===1&amp;&amp;has_weird_callback&amp;&amp;(selector={},options=args[0]);if(len===2&amp;&amp;!utils.isArray(fields)){var fieldKeys=Object.getOwnPropertyNames(fields),is_option=!1;for(var i=0;i&lt;fieldKeys.length;i++)if(testForFields[fieldKeys[i]]!=null){is_option=!0;break}is_option?(options=fields,fields=undefined):options={}}else if(len===2&amp;&amp;utils.isArray(fields)&amp;&amp;!utils.isArray(fields[0])){var newFields={};for(var i=0;i&lt;fields.length;i++)newFields[fields[i]]=1;fields=newFields}3===len&amp;&amp;(options=args[2]),selector=selector==null?{}:selector;var object=selector,object=fields;selector instanceof ObjectID&amp;&amp;(selector={_id:selector});if(options&amp;&amp;options.fields){fields={};if(utils.isArray(options.fields))if(!options.fields.length)fields._id=1;else for(var i=0,l=options.fields.length;i&lt;l;i++)fields[options.fields[i]]=1;else fields=options.fields}options||(options={}),options.skip=len&gt;3?args[2]:options.skip?options.skip:0,options.limit=len&gt;3?args[3]:options.limit?options.limit:0;var o=options,cursor=new Cursor(this.db,this,selector,fields,o.skip,o.limit,o.sort);return this.emit(\"find\",selector,cursor,o),this.db._executeCommand(\"find\",{conn:self.db,selector:selector,options:o}),callback?callback(cursor):cursor},Collection.prototype.findOne=function(selector,options){return arguments.length===0&amp;&amp;(selector={}),this.find(selector).fetch()[0]},Collection.prototype.insert=function(doc,options,cb){var self=this;\"function\"==typeof options&amp;&amp;(cb=options,options={}),options=options||{},doc=utils._deepcopy(doc),\"_id\"in doc||(doc._id=new ObjectId),doc.timestamp=(new ObjectId).generationTime,self.docs[doc._id]=doc;for(var qid in self.queries){var query=self.queries[qid];query.selector_f(doc)&amp;&amp;Collection._insertInResults(query,doc)}return options.ignore?cb?cb(doc):doc:(self.emit(\"insert\",doc),this.db._executeCommand(\"insert\",{conn:self.db,collection:self,doc:self.docs[doc._id]}),cb?cb(doc):doc)},Collection.prototype.remove=function(selector){var self=this,remove=[],query_remove=[],selector_f=Selector._compileSelector(selector);for(var id in self.docs){var doc=self.docs[id];selector_f(doc)&amp;&amp;remove.push(id)}for(var i=0;i&lt;remove.length;i++)delete self.docs[remove[i]];return self.emit(\"remove\",selector),this.db._executeCommand(\"remove\",{conn:self.db,selector:selector,docs:remove}),this},Collection.prototype.update=function(selector,mod,options,cb){var self=this;\"function\"==typeof options&amp;&amp;(cb=options,options={}),options=options||{};var self=this,any=!1,updatedDocs=[],selector_f=Selector._compileSelector(selector);for(var id in self.docs){var doc=self.docs[id];if(selector_f(doc)){updatedDocs.push(doc),Collection._modify(doc,mod);if(!options.multi)return any=!0,self.emit(\"update\",selector,mod,options),self.db._executeCommand(\"update\",{conn:self.db,selector:selector,modifier:mod,options:options,docs:updatedDocs}),cb?cb(self.docs[id]):self.docs[id]}}if(options.upsert)throw new Error(\"upsert not yet implemented\");options.upsert&amp;&amp;!any&amp;&amp;(insert=utils._deepcopy(selector),Collection._modify(insert,mod),self.insert(insert,{ignore:!0}));var newDoc=self.find(selector).fetch();return self.emit(\"update\",selector,mod,options),self.db._executeCommand(\"update\",{conn:self.db,selector:selector,modifier:mod,options:options,docs:newDoc}),cb?cb(newDoc):newDoc},Collection.prototype.save=function(obj,cb){var self=this;self.docs[obj._id]?self.update({_id:obj._id}):self.insert(obj)},Collection.prototype.ensureIndex=function(){throw new Error(\"Collection#ensureIndex unimplemented by driver\")},Collection.prototype.backup=function(){var snapID=new ObjectId;this.snapshots[snapID]={};for(var id in this.docs)this.snapshots[snapID][id]=this.docs[id];this.stores.snapshot({_id:this.docs[id],data:this.docs[id]}),this.emit(\"snapshot\",{_id:this.docs[id],data:this.docs[id]})},Collection.prototype.backups=function(){var keys=[];for(var k in obj)keys.push({id:k,timestamp:ObjectId.hexToTimestamp(k),data:obj[k]});return keys},Collection.prototype.deleteBackup=function(id){return delete this.snapshots[id],keys},Collection.prototype.restore=function(id,rm,cb){if(!this.snapshots.length)throw new Error(\"No current snapshot\");\"function\"==typeof rm&amp;&amp;(cb=rm,rm=!1),this.docs=this.snapshots[id||0];for(var qid in this.queries){var query=this.queries[qid],old_results=query.results;query.results=query.cursor._getRawObjects(),this.paused||Collection._diffQuery(old_results,query.results,query,!0)}this.emit(\"restore\");if(cb)return cb()};var checkCollectionName=function checkCollectionName(collectionName){if(\"string\"!=typeof collectionName)throw Error(\"collection name must be a String\");if(!collectionName||collectionName.indexOf(\"..\")!=-1)throw Error(\"collection names cannot be empty\");if(collectionName.indexOf(\"$\")!=-1&amp;&amp;collectionName.match(/((^\\$cmd)|(oplog\\.\\$main))/)==null)throw Error(\"collection names must not contain '$'\");if(collectionName.match(/^\\.|\\.$/)!=null)throw Error(\"collection names must not start or end with '.'\")};Cursor.prototype.rewind=function(){var self=this;self.db_objects=null,self.cursor_pos=0},Cursor.prototype.forEach=function(callback){var self=this,doc;self.db_objects===null&amp;&amp;(self.db_objects=self._getRawObjects());while(self.cursor_pos&lt;self.db_objects.length)callback(utils._deepcopy(self.db_objects[self.cursor_pos++]))},Cursor.prototype.map=function(callback){var self=this,res=[];return self.forEach(function(doc){res.push(callback(doc))}),res},Cursor.prototype.fetch=function(){var self=this,res=[];return self.forEach(function(doc){res.push(doc)}),res},Cursor.prototype.count=function(){var self=this;return self.db_objects===null&amp;&amp;(self.db_objects=self._getRawObjects()),self.db_objects.length},Cursor.prototype.sort=function(){},Cursor.prototype.limit=function(){},Cursor.prototype._getRawObjects=function(){var self=this;if(self.selector_id&amp;&amp;self.selector_id in self.collection.docs)return[self.collection.docs[self.selector_id]];var results=[];for(var id in self.collection.docs){var doc=self.collection.docs[id];self.selector_f(doc)&amp;&amp;results.push(doc)}self.sort_f&amp;&amp;results.sort(self.sort_f);var idx_start=self.skipValue||0,idx_end=self.limitValue?self.limitValue+idx_start:results.length;return results.slice(idx_start,idx_end)};var Monglo=function(databaseName){if(!(this instanceof Monglo))return new Monglo(databaseName);this._collections={},this._stores=[],Monglo.connections||(Monglo.connections={});if(Monglo.connections[databaseName])throw new Error(\"db name already in use\");this.databaseName=databaseName,Monglo.connections[databaseName]=new ObjectID,validateDatabaseName(databaseName)};Monglo.prototype.__proto__=EventEmitter.proto,Monglo.prototype.constructor=Monglo,Monglo.version=\"0.1.2\",Monglo._debug=function(){},Monglo.connections={},Monglo.prototype._executeCommand=function(name,args,cb){var self=this,command=name;utils.forEach(self._stores,function(fn){\"function\"==typeof fn[command]?fn[command](self,args,cb):\"function\"==typeof fn.all&amp;&amp;(args.name=name,fn.all(self,args,cb))})},Monglo.prototype.use=function(name,fn){switch(name){case\"sync\":this._sync=fn;break;case\"store\":this._stores.push(fn);break;case\"debug\":Monglo._debug=fn}},Monglo.prototype.addStore=function(store){return this._stores.push(store),this},Monglo.prototype.collectionsInfo=function(collectionName,callback){},Monglo.prototype.collectionNames=function(collectionName,options,callback){var self=this,args=Array.prototype.slice.call(arguments,0);callback=args.pop(),collectionName=args.length?args.shift():null,options=args.length?args.shift():{};var collectionList=[];for(var name in self._collections)collectionList.push(name);callback(null,collectionList)},Monglo.prototype.collection=function(collectionName,options,callback){var self=this,collection,collectionFullName=self.databaseName+\".\"+collectionName;return\"function\"==typeof options?(options={},callback=options):options=options||{},self._collections[collectionName]?(self._executeCommand(\"createCollection\",{conn:self,collection:self._collections[collectionName]}),callback(null,self._collections[collectionName])):(self._collections[collectionName]=new Collection(self,collectionName,self.pkFactory,options),self._executeCommand(\"createCollection\",{conn:self,collection:self._collections[collectionName]}),Object.defineProperty(Monglo.prototype,collectionName,{enumerable:!0,get:function(){return self._collections[collectionName]},set:function(v){self._collections[collectionName]=v}}),callback?callback(self._collections[collectionName]):self._collections[collectionName])},Monglo.prototype.collections=function(callback){var self=this;self.collectionNames(function(err,documents){if(err!=null)return callback(err,null);var collections=[];utils.forEach(documents,function(document){collections.push(new Collection(self,document.name.replace(self.databaseName+\".\",\"\"),self.pkFactory))}),callback(null,collections)})},Monglo.prototype.dereference=function(dbRef,callback){var db=this;dbRef.db!==null&amp;&amp;(db=this.db(dbRef.db));var collection=Monglo.collection(dbRef.namespace);collection.findOne({_id:dbRef.oid},function(err,result){callback(err,result)})},Monglo.prototype.createCollection=Monglo.prototype.collection,Monglo.prototype.dropCollection=function(collectionName,callback){var self=this;this._executeCommand(\"dropCollection\",{conn:this,collection:self})},Monglo.prototype.renameCollection=function(fromCollection,toCollection,callback){var self=this;this._executeCommand(\"renameCollection\",{conn:self,from:fromCollection,to:toCollection})},Monglo.prototype.createIndex=function(collectionName,fieldOrSpec,options,callback){throw new Error(\"Not implemented yet!\")},Monglo.prototype.ensureIndex=function(collectionName,fieldOrSpec,options,callback){throw new Error(\"Not implemented yet!\")},Monglo.prototype.dropIndex=function(collectionName,indexName,callback){throw new Error(\"Not implemented yet!\")},Monglo.prototype.reIndex=function(collectionName,callback){throw new Error(\"Not implemented yet!\")},Monglo.prototype.indexInformation=function(collectionName,options,callback){throw new Error(\"Not implemented yet!\")},Monglo.prototype.dropDatabase=function(callback){var self=this;this._executeCommand(\"dropDatabase\",{conn:this})},exports.Monglo=Monglo;var chr=String.fromCharCode,maxBits=[];for(var i=0;i&lt;64;i++)maxBits[i]=Math.pow(2,i);BinaryParser.warn=function warn(msg){if(this.allowExceptions)throw new Error(msg);return 1},BinaryParser.decodeFloat=function decodeFloat(data,precisionBits,exponentBits){var b=new this.Buffer(this.bigEndian,data);b.checkBuffer(precisionBits+exponentBits+1);var bias=maxBits[exponentBits-1]-1,signal=b.readBits(precisionBits+exponentBits,1),exponent=b.readBits(precisionBits,exponentBits),significand=0,divisor=2,curByte=b.buffer.length+(-precisionBits&gt;&gt;3)-1;do for(var byteValue=b.buffer[++curByte],startBit=precisionBits%8||8,mask=1&lt;&lt;startBit;mask&gt;&gt;=1;byteValue&amp;mask&amp;&amp;(significand+=1/divisor),divisor*=2);while(precisionBits-=startBit);return exponent==(bias&lt;&lt;1)+1?significand?NaN:signal?-Infinity:+Infinity:(1+signal*-2)*(exponent||significand?exponent?Math.pow(2,exponent-bias)*(1+significand):Math.pow(2,-bias+1)*significand:0)},BinaryParser.decodeInt=function decodeInt(data,bits,signed,forceBigEndian){var b=new this.Buffer(this.bigEndian||forceBigEndian,data),x=b.readBits(0,bits),max=maxBits[bits];return signed&amp;&amp;x&gt;=max/2?x-max:x},BinaryParser.encodeFloat=function encodeFloat(data,precisionBits,exponentBits){var bias=maxBits[exponentBits-1]-1,minExp=-bias+1,maxExp=bias,minUnnormExp=minExp-precisionBits,n=parseFloat(data),status=isNaN(n)||n==-Infinity||n==+Infinity?n:0,exp=0,len=2*bias+1+precisionBits+3,bin=new Array(len),signal=(n=status!==0?0:n)&lt;0,intPart=Math.floor(n=Math.abs(n)),floatPart=n-intPart,lastBit,rounded,result,i,j;for(i=len;i;bin[--i]=0);for(i=bias+2;intPart&amp;&amp;i;bin[--i]=intPart%2,intPart=Math.floor(intPart/2));for(i=bias+1;floatPart&gt;0&amp;&amp;i;(bin[++i]=((floatPart*=2)&gt;=1)-0)&amp;&amp;--floatPart);for(i=-1;++i&lt;len&amp;&amp;!bin[i];);if(bin[(lastBit=precisionBits-1+(i=(exp=bias+1-i)&gt;=minExp&amp;&amp;exp&lt;=maxExp?i+1:bias+1-(exp=minExp-1)))+1]){if(!(rounded=bin[lastBit]))for(j=lastBit+2;!rounded&amp;&amp;j&lt;len;rounded=bin[j++]);for(j=lastBit+1;rounded&amp;&amp;--j&gt;=0;(bin[j]=!bin[j]-0)&amp;&amp;(rounded=0));}for(i=i-2&lt;0?-1:i-3;++i&lt;len&amp;&amp;!bin[i];);(exp=bias+1-i)&gt;=minExp&amp;&amp;exp&lt;=maxExp?++i:exp&lt;minExp&amp;&amp;(exp!=bias+1-len&amp;&amp;exp&lt;minUnnormExp&amp;&amp;this.warn(\"encodeFloat::float underflow\"),i=bias+1-(exp=minExp-1));if(intPart||status!==0)this.warn(intPart?\"encodeFloat::float overflow\":\"encodeFloat::\"+status),exp=maxExp+1,i=bias+2,status==-Infinity?signal=1:isNaN(status)&amp;&amp;(bin[i]=1);for(n=Math.abs(exp+bias),j=exponentBits+1,result=\"\";--j;result=n%2+result,n=n&gt;&gt;=1);for(n=0,j=0,i=(result=(signal?\"1\":\"0\")+result+bin.slice(i,i+precisionBits).join(\"\")).length,r=[];i;j=(j+1)%8)n+=(1&lt;&lt;j)*result.charAt(--i),j==7&amp;&amp;(r[r.length]=String.fromCharCode(n),n=0);return r[r.length]=n?String.fromCharCode(n):\"\",(this.bigEndian?r.reverse():r).join(\"\")},BinaryParser.encodeInt=function encodeInt(data,bits,signed,forceBigEndian){var max=maxBits[bits];if(data&gt;=max||data&lt;-(max/2))this.warn(\"encodeInt::overflow\"),data=0;data&lt;0&amp;&amp;(data+=max);for(var r=[];data;r[r.length]=String.fromCharCode(data%256),data=Math.floor(data/256));for(bits=-(-bits&gt;&gt;3)-r.length;bits--;r[r.length]=\"\\0\");return(this.bigEndian||forceBigEndian?r.reverse():r).join(\"\")},BinaryParser.toSmall=function(data){return this.decodeInt(data,8,!0)},BinaryParser.fromSmall=function(data){return this.encodeInt(data,8,!0)},BinaryParser.toByte=function(data){return this.decodeInt(data,8,!1)},BinaryParser.fromByte=function(data){return this.encodeInt(data,8,!1)},BinaryParser.toShort=function(data){return this.decodeInt(data,16,!0)},BinaryParser.fromShort=function(data){return this.encodeInt(data,16,!0)},BinaryParser.toWord=function(data){return this.decodeInt(data,16,!1)},BinaryParser.fromWord=function(data){return this.encodeInt(data,16,!1)},BinaryParser.toInt=function(data){return this.decodeInt(data,32,!0)},BinaryParser.fromInt=function(data){return this.encodeInt(data,32,!0)},BinaryParser.toLong=function(data){return this.decodeInt(data,64,!0)},BinaryParser.fromLong=function(data){return this.encodeInt(data,64,!0)},BinaryParser.toDWord=function(data){return this.decodeInt(data,32,!1)},BinaryParser.fromDWord=function(data){return this.encodeInt(data,32,!1)},BinaryParser.toQWord=function(data){return this.decodeInt(data,64,!0)},BinaryParser.fromQWord=function(data){return this.encodeInt(data,64,!0)},BinaryParser.toFloat=function(data){return this.decodeFloat(data,23,8)},BinaryParser.fromFloat=function(data){return this.encodeFloat(data,23,8)},BinaryParser.toDouble=function(data){return this.decodeFloat(data,52,11)},BinaryParser.fromDouble=function(data){return this.encodeFloat(data,52,11)},BinaryParser.encode_int32=function encode_int32(number,asArray){var a,b,c,d,unsigned;return unsigned=number&lt;0?number+4294967296:number,a=Math.floor(unsigned/16777215),unsigned&amp;=16777215,b=Math.floor(unsigned/65535),unsigned&amp;=65535,c=Math.floor(unsigned/255),unsigned&amp;=255,d=Math.floor(unsigned),asArray?[chr(a),chr(b),chr(c),chr(d)]:chr(a)+chr(b)+chr(c)+chr(d)},BinaryParser.encode_int64=function encode_int64(number){var a,b,c,d,e,f,g,h,unsigned;return unsigned=number&lt;0?number+0x10000000000000000:number,a=Math.floor(unsigned/72057594037927940),unsigned&amp;=72057594037927940,b=Math.floor(unsigned/0xffffffffffff),unsigned&amp;=0xffffffffffff,c=Math.floor(unsigned/0xffffffffff),unsigned&amp;=0xffffffffff,d=Math.floor(unsigned/4294967295),unsigned&amp;=4294967295,e=Math.floor(unsigned/16777215),unsigned&amp;=16777215,f=Math.floor(unsigned/65535),unsigned&amp;=65535,g=Math.floor(unsigned/255),unsigned&amp;=255,h=Math.floor(unsigned),chr(a)+chr(b)+chr(c)+chr(d)+chr(e)+chr(f)+chr(g)+chr(h)},BinaryParser.decode_utf8=function decode_utf8(binaryStr){var len=binaryStr.length,decoded=\"\",i=0,c=0,c1=0,c2=0,c3;while(i&lt;len)c=binaryStr.charCodeAt(i),c&lt;128?(decoded+=String.fromCharCode(c),i++):c&gt;191&amp;&amp;c&lt;224?(c2=binaryStr.charCodeAt(i+1),decoded+=String.fromCharCode((c&amp;31)&lt;&lt;6|c2&amp;63),i+=2):(c2=binaryStr.charCodeAt(i+1),c3=binaryStr.charCodeAt(i+2),decoded+=String.fromCharCode((c&amp;15)&lt;&lt;12|(c2&amp;63)&lt;&lt;6|c3&amp;63),i+=3);return decoded},BinaryParser.encode_cstring=function encode_cstring(s){return unescape(encodeURIComponent(s))+BinaryParser.fromByte(0)},BinaryParser.encode_utf8=function encode_utf8(s){var a=\"\",c;for(var n=0,len=s.length;n&lt;len;n++)c=s.charCodeAt(n),c&lt;128?a+=String.fromCharCode(c):c&gt;127&amp;&amp;c&lt;2048?(a+=String.fromCharCode(c&gt;&gt;6|192),a+=String.fromCharCode(c&amp;63|128)):(a+=String.fromCharCode(c&gt;&gt;12|224),a+=String.fromCharCode(c&gt;&gt;6&amp;63|128),a+=String.fromCharCode(c&amp;63|128));return a},BinaryParser.hprint=function hprint(s){var number;for(var i=0,len=s.length;i&lt;len;i++)s.charCodeAt(i)&lt;32?(number=s.charCodeAt(i)&lt;=15?\"0\"+s.charCodeAt(i).toString(16):s.charCodeAt(i).toString(16),process.stdout.write(number+\" \")):(number=s.charCodeAt(i)&lt;=15?\"0\"+s.charCodeAt(i).toString(16):s.charCodeAt(i).toString(16),process.stdout.write(number+\" \"));process.stdout.write(\"\\n\\n\")},BinaryParser.ilprint=function hprint(s){var number;for(var i=0,len=s.length;i&lt;len;i++)s.charCodeAt(i)&lt;32?number=s.charCodeAt(i)&lt;=15?\"0\"+s.charCodeAt(i).toString(10):s.charCodeAt(i).toString(10):number=s.charCodeAt(i)&lt;=15?\"0\"+s.charCodeAt(i).toString(10):s.charCodeAt(i).toString(10)},BinaryParser.hlprint=function hprint(s){var number;for(var i=0,len=s.length;i&lt;len;i++)s.charCodeAt(i)&lt;32?number=s.charCodeAt(i)&lt;=15?\"0\"+s.charCodeAt(i).toString(16):s.charCodeAt(i).toString(16):number=s.charCodeAt(i)&lt;=15?\"0\"+s.charCodeAt(i).toString(16):s.charCodeAt(i).toString(16)},BinaryParserBuffer.prototype.setBuffer=function setBuffer(data){var l,i,b;if(data){i=l=data.length,b=this.buffer=new Array(l);for(;i;b[l-i]=data.charCodeAt(--i));this.bigEndian&amp;&amp;b.reverse()}},BinaryParserBuffer.prototype.hasNeededBits=function hasNeededBits(neededBits){return this.buffer.length&gt;=-(-neededBits&gt;&gt;3)},BinaryParserBuffer.prototype.checkBuffer=function checkBuffer(neededBits){if(!this.hasNeededBits(neededBits))throw new Error(\"checkBuffer::missing bytes\")},BinaryParserBuffer.prototype.readBits=function readBits(start,length){function shl(a,b){for(;b--;a=((a%=2147483647+1)&amp;1073741824)==1073741824?a*2:(a-1073741824)*2+2147483647+1);return a}if(start&lt;0||length&lt;=0)return 0;this.checkBuffer(start+length);var offsetLeft,offsetRight=start%8,curByte=this.buffer.length-(start&gt;&gt;3)-1,lastByte=this.buffer.length+(-(start+length)&gt;&gt;3),diff=curByte-lastByte,sum=(this.buffer[curByte]&gt;&gt;offsetRight&amp;(1&lt;&lt;(diff?8-offsetRight:length))-1)+(diff&amp;&amp;(offsetLeft=(start+length)%8)?(this.buffer[lastByte++]&amp;(1&lt;&lt;offsetLeft)-1)&lt;&lt;(diff--&lt;&lt;3)-offsetRight:0);for(;diff;sum+=shl(this.buffer[lastByte++],(diff--&lt;&lt;3)-offsetRight));return sum},BinaryParser.Buffer=BinaryParserBuffer,typeof window==\"undefined\"&amp;&amp;(exports.BinaryParser=BinaryParser);var MACHINE_ID=parseInt(Math.random()*16777215,10),checkForHexRegExp=new RegExp(\"^[0-9a-fA-F]{24}$\"),ObjectID=function ObjectID(id,_hex){if(!(this instanceof ObjectID))return new ObjectID(id,_hex);this._bsontype=\"ObjectID\";var __id=null;if(id!=null&amp;&amp;\"number\"!=typeof id&amp;&amp;id.length!=12&amp;&amp;id.length!=24)throw new Error(\"Argument passed in must be a single String of 12 bytes or a string of 24 hex characters\");if(id==null||typeof id==\"number\")this.id=this.generate(id);else if(id!=null&amp;&amp;id.length===12)this.id=id;else{if(checkForHexRegExp.test(id))return ObjectID.createFromHexString(id);if(!checkForHexRegExp.test(id))throw new Error(\"Value passed in is not a valid 24 character hex string\")}ObjectID.cacheHexString&amp;&amp;(this.__id=this.toHexString())},ObjectId=ObjectID;ObjectID.prototype.toHexString=function(){if(ObjectID.cacheHexString&amp;&amp;this.__id)return this.__id;var hexString=\"\",number,value;for(var index=0,len=this.id.length;index&lt;len;index++)value=BinaryParser.toByte(this.id[index]),number=value&lt;=15?\"0\"+value.toString(16):value.toString(16),hexString+=number;return ObjectID.cacheHexString&amp;&amp;(this.__id=hexString),hexString},ObjectID.prototype.get_inc=function(){return ObjectID.index=(ObjectID.index+1)%16777215},ObjectID.prototype.getInc=function(){return this.get_inc()},ObjectID.prototype.generate=function(time){if(\"number\"==typeof time)var time4Bytes=BinaryParser.encodeInt(time,32,!0,!0),machine3Bytes=BinaryParser.encodeInt(MACHINE_ID,24,!1),pid2Bytes=BinaryParser.fromShort(typeof process==\"undefined\"?Math.floor(Math.random()*1e5):process.pid),index3Bytes=BinaryParser.encodeInt(this.get_inc(),24,!1,!0);else var unixTime=parseInt(Date.now()/1e3,10),time4Bytes=BinaryParser.encodeInt(unixTime,32,!0,!0),machine3Bytes=BinaryParser.encodeInt(MACHINE_ID,24,!1),pid2Bytes=BinaryParser.fromShort(typeof process==\"undefined\"?Math.floor(Math.random()*1e5):process.pid),index3Bytes=BinaryParser.encodeInt(this.get_inc(),24,!1,!0);return time4Bytes+machine3Bytes+pid2Bytes+index3Bytes},ObjectID.prototype.toString=function(){return this.toHexString()},ObjectID.prototype.inspect=ObjectID.prototype.toString,ObjectID.prototype.toJSON=function(){return this.toHexString()},ObjectID.prototype.equals=function equals(otherID){var id=otherID instanceof ObjectID||otherID.toHexString?otherID.id:ObjectID.createFromHexString(otherID).id;return this.id===id},ObjectID.prototype.getTimestamp=function(){var timestamp=new Date;return timestamp.setTime(Math.floor(BinaryParser.decodeInt(this.id.substring(0,4),32,!0,!0))*1e3),timestamp},ObjectID.index=0,ObjectID.createPk=function createPk(){return new ObjectID},ObjectID.createFromTime=function createFromTime(time){var id=BinaryParser.encodeInt(time,32,!0,!0)+BinaryParser.encodeInt(0,64,!0,!0);return new ObjectID(id)},ObjectID.createFromHexString=function createFromHexString(hexString){if(typeof hexString==\"undefined\"||hexString!=null&amp;&amp;hexString.length!=24)throw new Error(\"Argument passed in must be a single String of 12 bytes or a string of 24 hex characters\");var len=hexString.length;if(len&gt;24)throw new Error(\"Id cannot be longer than 12 bytes\");var result=\"\",string,number;for(var index=0;index&lt;len;index+=2)string=hexString.substr(index,2),number=parseInt(string,16),result+=BinaryParser.fromByte(number);return new ObjectID(result,hexString)},Object.defineProperty(ObjectID.prototype,\"generationTime\",{enumerable:!0,get:function(){return Math.floor(BinaryParser.decodeInt(this.id.substring(0,4),32,!0,!0))},set:function(value){var value=BinaryParser.encodeInt(value,32,!0,!0);this.id=value+this.id.substr(4),this.toHexString()}}),exports.ObjectID=ObjectID,exports.ObjectId=ObjectID,Collection._diffQuery=function(old_results,new_results,observer,deepcopy){var new_presence_of_id={};_.each(new_results,function(doc){new_presence_of_id[doc._id]&amp;&amp;utils.debug(\"Duplicate _id in new_results\"),new_presence_of_id[doc._id]=!0});var old_index_of_id={};_.each(old_results,function(doc,i){doc._id in old_index_of_id&amp;&amp;utils.debug(\"Duplicate _id in old_results\"),old_index_of_id[doc._id]=i});var mdc=deepcopy?Collection._deepcopy:_.identity,unmoved_set={},max_seq_len=0,N=new_results.length,seq_ends=new Array(N),ptrs=new Array(N),old_idx_seq=function(i_new){return old_index_of_id[new_results[i_new]._id]};for(var i=0;i&lt;N;i++)if(old_index_of_id[new_results[i]._id]!==undefined){var j=max_seq_len;while(j&gt;0){if(old_idx_seq(seq_ends[j-1])&lt;old_idx_seq(i))break;j--}ptrs[i]=j===0?-1:seq_ends[j-1],seq_ends[j]=i,j+1&gt;max_seq_len&amp;&amp;(max_seq_len=j+1)}var idx=max_seq_len===0?-1:seq_ends[max_seq_len-1];while(idx&gt;=0)unmoved_set[idx]=!0,idx=ptrs[idx];var old_idx=0,new_idx=0,bump_list=[],bump_list_old_idx=[],taken_list=[],scan_to=function(old_j){while(old_idx&lt;old_j){var old_doc=old_results[old_idx],is_in_new=new_presence_of_id[old_doc._id];is_in_new?taken_list.length&gt;=1&amp;&amp;taken_list[0]===old_idx?taken_list.shift():(bump_list.push(new_idx),bump_list_old_idx.push(old_idx)):observer.removed&amp;&amp;observer.removed(old_doc,new_idx+bump_list.length),old_idx++}};while(new_idx&lt;=new_results.length){if(new_idx&lt;new_results.length){var new_doc=new_results[new_idx],old_doc_idx=old_index_of_id[new_doc._id];if(old_doc_idx===undefined)observer.added&amp;&amp;observer.added(mdc(new_doc),new_idx+bump_list.length);else{var old_doc=old_results[old_doc_idx],is_unmoved=unmoved_set[new_idx];if(is_unmoved)old_doc_idx&lt;old_idx&amp;&amp;utils.debug(\"Assertion failed while diffing: nonmonotonic lcs data\"),scan_to(old_doc_idx),_.isEqual(old_doc,new_doc)||observer.changed&amp;&amp;observer.changed(mdc(new_doc),new_idx+bump_list.length,old_doc),old_idx++;else{var to_idx=new_idx+bump_list.length,from_idx;if(old_doc_idx&gt;=old_idx){from_idx=to_idx+old_doc_idx-old_idx;var num_taken_before=_.sortedIndex(taken_list,old_doc_idx);from_idx-=num_taken_before,taken_list.splice(num_taken_before,0,old_doc_idx)}else{var b=_.indexOf(bump_list_old_idx,old_doc_idx,!0);b&lt;0&amp;&amp;utils.debug(\"Assertion failed while diffing: no bumped item\"),from_idx=bump_list[b]+b,to_idx--,bump_list.splice(b,1),bump_list_old_idx.splice(b,1)}from_idx!=to_idx&amp;&amp;observer.moved&amp;&amp;observer.moved(mdc(old_doc),from_idx,to_idx),_.isEqual(old_doc,new_doc)||observer.changed&amp;&amp;observer.changed(mdc(new_doc),to_idx,old_doc)}}}else scan_to(old_results.length);new_idx++}bump_list.length&gt;0&amp;&amp;(utils.debug(old_results),utils.debug(new_results),utils.debug(\"Assertion failed while diffing: leftover bump_list \"+bump_list))};var isArray=Array.isArray,domain;exports.EventEmitter=EventEmitter;var defaultMaxListeners=10;EventEmitter.prototype.setMaxListeners=function(n){this._events||(this._events={}),this._maxListeners=n},EventEmitter.prototype.emit=function(){var type=arguments[0];if(type===\"error\")if(!this._events||!this._events.error||isArray(this._events.error)&amp;&amp;!this._events.error.length)throw arguments[1]instanceof Error?arguments[1]:new Error(\"Uncaught, unspecified 'error' event.\");if(!this._events)return!1;var handler=this._events[type];if(!handler)return!1;if(typeof handler==\"function\"){switch(arguments.length){case 1:handler.call(this);break;case 2:handler.call(this,arguments[1]);break;case 3:handler.call(this,arguments[1],arguments[2]);break;default:var l=arguments.length,args=new Array(l-1);for(var i=1;i&lt;l;i++)args[i-1]=arguments[i];handler.apply(this,args)}return!0}if(isArray(handler)){var l=arguments.length,args=new Array(l-1);for(var i=1;i&lt;l;i++)args[i-1]=arguments[i];var listeners=handler.slice();for(var i=0,l=listeners.length;i&lt;l;i++)listeners[i].apply(this,args);return!0}return!1},EventEmitter.prototype.addListener=function(type,listener){if(\"function\"!=typeof listener)throw new Error(\"addListener only takes instances of Function\");this._events||(this._events={}),this.emit(\"newListener\",type,typeof listener.listener==\"function\"?listener.listener:listener),this._events[type]?isArray(this._events[type])?this._events[type].push(listener):this._events[type]=[this._events[type],listener]:this._events[type]=listener;if(isArray(this._events[type])&amp;&amp;!this._events[type].warned){var m;this._maxListeners!==undefined?m=this._maxListeners:m=defaultMaxListeners,m&amp;&amp;m&gt;0&amp;&amp;this._events[type].length&gt;m&amp;&amp;(this._events[type].warned=!0,console.error(\"(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.\",this._events[type].length),console.trace())}return this},EventEmitter.prototype.on=EventEmitter.prototype.addListener,EventEmitter.prototype.once=function(type,listener){function g(){self.removeListener(type,g),listener.apply(this,arguments)}if(\"function\"!=typeof listener)throw new Error(\".once only takes instances of Function\");var self=this;return g.listener=listener,self.on(type,g),this},EventEmitter.prototype.removeListener=function(type,listener){if(\"function\"!=typeof listener)throw new Error(\"removeListener only takes instances of Function\");if(!this._events||!this._events[type])return this;var list=this._events[type];if(isArray(list)){var position=-1;for(var i=0,length=list.length;i&lt;length;i++)if(list[i]===listener||list[i].listener&amp;&amp;list[i].listener===listener){position=i;break}if(position&lt;0)return this;list.splice(position,1)}else(list===listener||list.listener&amp;&amp;list.listener===listener)&amp;&amp;delete this._events[type];return this},EventEmitter.prototype.removeAllListeners=function(type){return arguments.length===0?(this._events={},this):(type&amp;&amp;this._events&amp;&amp;this._events[type]&amp;&amp;(this._events[type]=null),this)},EventEmitter.prototype.listeners=function(type){return this._events||(this._events={}),this._events[type]||(this._events[type]=[]),isArray(this._events[type])||(this._events[type]=[this._events[type]]),this._events[type]},Collection._modify=function(doc,mod){var is_modifier=!1;for(var k in mod){is_modifier=k.substr(0,1)===\"$\";break}var new_doc;if(!is_modifier){mod._id&amp;&amp;doc._id!==mod._id&amp;&amp;Monglo._debug(\"_id ignored : Cannot change the _id of a document\");for(var k in mod){if(k.substr(0,1)===\"$\")throw Error(\"Field name may not start with '$'\");if(/\\./.test(k))throw Error(\"Field name may not contain '.'\")}new_doc=mod}else{var new_doc=Collection._deepcopy(doc);for(var op in mod){var mod_func=Collection._modifiers[op];if(!mod_func)throw Error(\"Invalid modifier specified \"+op);for(var keypath in mod[op]){if(keypath.length&amp;&amp;keypath[keypath.length-1]===\".\")throw Error(\"Invalid mod field name, may not end in a period\");var arg=mod[op][keypath],keyparts=keypath.split(\".\"),no_create=!!Collection._noCreateModifiers[op],forbid_array=op===\"$rename\",target=Collection._findModTarget(new_doc,keyparts,no_create,forbid_array),field=keyparts.pop();mod_func(target,field,arg,keypath,new_doc)}}}for(var k in doc)k!==\"_id\"&amp;&amp;delete doc[k];for(var k in new_doc)doc[k]=new_doc[k]},Collection._findModTarget=function(doc,keyparts,no_create,forbid_array){for(var i=0;i&lt;keyparts.length;i++){var last=i===keyparts.length-1,keypart=keyparts[i],numeric=/^[0-9]+$/.test(keypart);if(!(!no_create||typeof doc==\"object\"&amp;&amp;keypart in doc))return undefined;if(doc instanceof Array){if(forbid_array)return null;if(!numeric)throw Error(\"can't append to array using string field name [\"+keypart+\"]\");keypart=parseInt(keypart),last&amp;&amp;(keyparts[i]=keypart);while(doc.length&lt;keypart)doc.push(null);if(!last)if(doc.length===keypart)doc.push({});else if(typeof doc[keypart]!=\"object\")throw Error(\"can't modify field '\"+keyparts[i+1]+\"' of list value \"+JSON.stringify(doc[keypart]))}else!last&amp;&amp;!(keypart in doc)&amp;&amp;(doc[keypart]={});if(last)return doc;doc=","doc[keypart]}},Collection._noCreateModifiers={$unset:!0,$pop:!0,$rename:!0,$pull:!0,$pullAll:!0},Collection._modifiers={$inc:function(target,field,arg){if(typeof arg!=\"number\")throw Error(\"Modifier $inc allowed for numbers only\");if(field in target){if(typeof target[field]!=\"number\")throw Error(\"Cannot apply $inc modifier to non-number\");target[field]+=arg}else target[field]=arg},$set:function(target,field,arg){target[field]=Collection._deepcopy(arg)},$unset:function(target,field,arg){target!==undefined&amp;&amp;(target instanceof Array?field in target&amp;&amp;(target[field]=null):delete target[field])},$push:function(target,field,arg){var x=target[field];if(x===undefined)target[field]=[arg];else{if(!(x instanceof Array))throw Error(\"Cannot apply $push modifier to non-array\");x.push(Collection._deepcopy(arg))}},$pushAll:function(target,field,arg){if(!(typeof arg==\"object\"&amp;&amp;arg instanceof Array))throw Error(\"Modifier $pushAll/pullAll allowed for arrays only\");var x=target[field];if(x===undefined)target[field]=arg;else{if(!(x instanceof Array))throw Error(\"Cannot apply $pushAll modifier to non-array\");for(var i=0;i&lt;arg.length;i++)x.push(arg[i])}},$addToSet:function(target,field,arg){var x=target[field];if(x===undefined)target[field]=[arg];else{if(!(x instanceof Array))throw Error(\"Cannot apply $addToSet modifier to non-array\");var isEach=!1;if(typeof arg==\"object\")for(var k in arg){k===\"$each\"&amp;&amp;(isEach=!0);break}var values=isEach?arg.$each:[arg];_.each(values,function(value){for(var i=0;i&lt;x.length;i++)if(Collection._f._equal(value,x[i]))return;x.push(value)})}},$pop:function(target,field,arg){if(target===undefined)return;var x=target[field];if(x===undefined)return;if(!(x instanceof Array))throw Error(\"Cannot apply $pop modifier to non-array\");typeof arg==\"number\"&amp;&amp;arg&lt;0?x.splice(0,1):x.pop()},$pull:function(target,field,arg){if(target===undefined)return;var x=target[field];if(x===undefined)return;if(!(x instanceof Array))throw Error(\"Cannot apply $pull/pullAll modifier to non-array\");var out=[];if(typeof arg!=\"object\"||arg instanceof Array)for(var i=0;i&lt;x.length;i++)Collection._f._equal(x[i],arg)||out.push(x[i]);else{var match=Collection._compileSelector(arg);for(var i=0;i&lt;x.length;i++)match(x[i])||out.push(x[i])}target[field]=out},$pullAll:function(target,field,arg){if(!(typeof arg==\"object\"&amp;&amp;arg instanceof Array))throw Error(\"Modifier $pushAll/pullAll allowed for arrays only\");if(target===undefined)return;var x=target[field];if(x===undefined)return;if(!(x instanceof Array))throw Error(\"Cannot apply $pull/pullAll modifier to non-array\");var out=[];for(var i=0;i&lt;x.length;i++){var exclude=!1;for(var j=0;j&lt;arg.length;j++)if(Collection._f._equal(x[i],arg[j])){exclude=!0;break}exclude||out.push(x[i])}target[field]=out},$rename:function(target,field,arg,keypath,doc){if(keypath===arg)throw Error(\"$rename source must differ from target\");if(target===null)throw Error(\"$rename source field invalid\");if(typeof arg!=\"string\")throw Error(\"$rename target must be a string\");if(target===undefined)return;var v=target[field];delete target[field];var keyparts=arg.split(\".\"),target2=Collection._findModTarget(doc,keyparts,!1,!0);if(target2===null)throw Error(\"$rename target field invalid\");var field2=keyparts.pop();target2[field2]=v},$bit:function(target,field,arg){throw Error(\"$bit is not supported\")}};var Selector={};Selector._f={_all:function(x,qval){if(x instanceof Array){var parts={},remaining=0;utils.each(qval,function(q){var hash=JSON.stringify(q);hash in parts||(parts[hash]=!0,remaining++)});for(var i=0;i&lt;x.length;i++){var hash=JSON.stringify(x[i]);if(parts[hash]){delete parts[hash],remaining--;if(0===remaining)return!0}}return!1}return!1},_in:function(x,qval){if(typeof x!=\"object\"){for(var i=0;i&lt;qval.length;i++)if(x===qval[i])return!0;return!1}for(var i=0;i&lt;qval.length;i++)if(Selector._f._equal(x,qval[i]))return!0;return!1},_type:function(v){return typeof v==\"number\"?1:typeof v==\"string\"?2:typeof v==\"boolean\"?8:v instanceof Array?4:v===null?10:v instanceof RegExp?11:typeof v==\"function\"?13:3},_equal:function(x,qval){var match=function(a,b){if(typeof a==\"number\"||typeof a==\"string\"||typeof a==\"boolean\"||a===undefined||a===null)return a===b;if(typeof a==\"function\")return!1;if(typeof b!=\"object\")return!1;if(a instanceof Array){if(b instanceof Array){if(a.length!==b.length)return!1;for(var i=0;i&lt;a.length;i++)if(!match(a[i],b[i]))return!1;return!0}return!1}var b_keys=[];for(var x in b)b_keys.push(b[x]);var i=0;for(var x in a){if(i&gt;=b_keys.length)return!1;if(!match(a[x],b_keys[i]))return!1;i++}return i!==b_keys.length?!1:!0};return match(x,qval)},_matches:function(x,f){if(x instanceof Array){for(var i=0;i&lt;x.length;i++)if(f(x[i]))return!0;return!1}return f(x)},_matches_plus:function(x,f){if(x instanceof Array)for(var i=0;i&lt;x.length;i++)if(f(x[i]))return!0;return f(x)},_typeorder:function(t){return[-1,1,2,3,4,5,-1,6,7,8,0,9,-1,100,2,100,1,8,1][t]},_cmp:function(a,b){if(a===undefined)return b===undefined?0:-1;if(b===undefined)return 1;var ta=Selector._f._type(a),tb=Selector._f._type(b),oa=Selector._f._typeorder(ta),ob=Selector._f._typeorder(tb);if(oa!==ob)return oa&lt;ob?-1:1;if(ta!==tb)throw Error(\"Missing type coercion logic in _cmp\");if(ta===1)return a-b;if(tb===2)return a&lt;b?-1:a===b?0:1;if(ta===3){var to_array=function(obj){var ret=[];for(var key in obj)ret.push(key),ret.push(obj[key]);return ret};return Selector._f._cmp(to_array(a),to_array(b))}if(ta===4)for(var i=0;;i++){if(i===a.length)return i===b.length?0:-1;if(i===b.length)return 1;var s=Selector._f._cmp(a[i],b[i]);if(s!==0)return s}if(ta===8)return a?b?0:1:b?-1:0;if(ta===10)return 0;if(ta===11)throw Error(\"Sorting not supported on regular expression\");if(ta===13)throw Error(\"Sorting not supported on Javascript code\")}},Selector._matches=function(selector,doc){return Selector._compileSelector(selector)(doc)},Selector._compileSelector=function(selector){var literals=[];if(selector instanceof Function)return function(doc){return selector.call(doc)};if(typeof selector==\"string\"||typeof selector==\"number\")selector={_id:selector};if(!selector||\"_id\"in selector&amp;&amp;!selector._id)return function(doc){return!1};var _func;return eval(\"_func = (function(f,literals){return function(doc){return \"+Selector._exprForSelector(selector,literals)+\";};})\"),_func(Selector._f,literals)},Selector._exprForSelector=function(selector,literals){var clauses=[];for(var key in selector){var value=selector[key];key.substr(0,1)===\"$\"?clauses.push(Selector._exprForDocumentPredicate(key,value,literals)):clauses.push(Selector._exprForKeypathPredicate(key,value,literals))}return clauses.length===0?\"true\":\"(\"+clauses.join(\"&amp;&amp;\")+\")\"},Selector._exprForDocumentPredicate=function(op,value,literals){if(op===\"$or\"){var clauses=[];return utils.each(value,function(c){clauses.push(Selector._exprForSelector(c,literals))}),clauses.length===0?\"true\":\"(\"+clauses.join(\"||\")+\")\"}if(op===\"$and\"){var clauses=[];return utils.each(value,function(c){clauses.push(Selector._exprForSelector(c,literals))}),clauses.length===0?\"true\":\"(\"+clauses.join(\"&amp;&amp;\")+\")\"}if(op===\"$nor\"){var clauses=[];return utils.each(value,function(c){clauses.push(\"!(\"+Selector._exprForSelector(c,literals)+\")\")}),clauses.length===0?\"true\":\"(\"+clauses.join(\"&amp;&amp;\")+\")\"}if(op===\"$where\")return value instanceof Function?(literals.push(value),\"literals[\"+(literals.length-1)+\"].call(doc)\"):\"(function(){return \"+value+\";}).call(doc)\";throw Error(\"Unrecogized key in selector: \",op)},Selector._exprForKeypathPredicate=function(keypath,value,literals){var keyparts=keypath.split(\".\"),predcode=\"\";if(value instanceof RegExp)predcode=Selector._exprForOperatorTest(value,literals);else if(typeof value!=\"object\"||value===null||value instanceof Array)predcode=Selector._exprForValueTest(value,literals);else{var is_literal=!0;for(var k in value)if(k.substr(0,1)===\"$\"){is_literal=!1;break}is_literal?predcode=Selector._exprForValueTest(value,literals):predcode=Selector._exprForOperatorTest(value,literals)}var ret=\"\",innermost=!0;while(keyparts.length){var part=keyparts.pop(),formal=keyparts.length?\"x\":\"doc\";innermost?(ret=\"(function(x){return \"+predcode+\";})(\"+formal+\"&amp;&amp;\"+formal+\"[\"+JSON.stringify(part)+\"])\",innermost=!1):ret=\"f._matches(\"+formal+\"&amp;&amp;\"+formal+\"[\"+JSON.stringify(part)+\"], function(x){return \"+ret+\";})\"}return ret},Selector._exprForValueTest=function(value,literals){var expr;if(value===null)expr=\"x===null||x===undefined\";else if(typeof value==\"string\"||typeof value==\"number\"||typeof value==\"boolean\")expr=\"x===\"+JSON.stringify(value);else{if(typeof value==\"function\")throw Error(\"Bad value type in query\");expr=\"f._equal(x,\"+JSON.stringify(value)+\")\"}return\"f._matches_plus(x,function(x){return \"+expr+\";})\"},Selector._exprForOperatorTest=function(op,literals){if(op instanceof RegExp)return Selector._exprForOperatorTest({$regex:op},literals);var clauses=[];for(var type in op)clauses.push(Selector._exprForConstraint(type,op[type],op,literals));return clauses.length===0?\"true\":\"(\"+clauses.join(\"&amp;&amp;\")+\")\"},Selector._exprForConstraint=function(type,arg,others,literals){var expr,search=\"_matches\",negate=!1;if(type===\"$gt\")expr=\"f._cmp(x,\"+JSON.stringify(arg)+\")&gt;0\";else if(type===\"$lt\")expr=\"f._cmp(x,\"+JSON.stringify(arg)+\")&lt;0\";else if(type===\"$gte\")expr=\"f._cmp(x,\"+JSON.stringify(arg)+\")&gt;=0\";else if(type===\"$lte\")expr=\"f._cmp(x,\"+JSON.stringify(arg)+\")&lt;=0\";else if(type===\"$all\")expr=\"f._all(x,\"+JSON.stringify(arg)+\")\",search=null;else if(type===\"$exists\")arg?expr=\"x!==undefined\":expr=\"x===undefined\",search=null;else if(type===\"$mod\")expr=\"x%\"+JSON.stringify(arg[0])+\"===\"+JSON.stringify(arg[1]);else if(type===\"$ne\")typeof arg!=\"object\"?expr=\"x===\"+JSON.stringify(arg):expr=\"f._equal(x,\"+JSON.stringify(arg)+\")\",search=\"_matches_plus\",negate=!0;else if(type===\"$in\")expr=\"f._in(x,\"+JSON.stringify(arg)+\")\",search=\"_matches_plus\";else if(type===\"$nin\")expr=\"f._in(x,\"+JSON.stringify(arg)+\")\",search=\"_matches_plus\",negate=!0;else if(type===\"$size\")expr=\"(x instanceof Array)&amp;&amp;x.length===\"+arg,search=null;else if(type===\"$type\")expr=\"f._type(x)===\"+JSON.stringify(arg);else if(type===\"$regex\"){if(\"$options\"in others&amp;&amp;/[^gim]/.test(others.$options))throw Error(\"Only the i, m, and g regexp options are supported\");expr=\"literals[\"+literals.length+\"].test(x)\",arg instanceof RegExp?\"$options\"in others?literals.push(new RegExp(arg.source,others.$options)):literals.push(arg):literals.push(new RegExp(arg,others.$options))}else if(type===\"$options\")expr=\"true\",search=null;else{if(type===\"$elemMatch\")throw Error(\"$elemMatch unimplemented\");if(type!==\"$not\")throw Error(\"Unrecognized key in selector: \"+type);expr=\"!\"+Selector._exprForOperatorTest(arg,literals),search=null}return search&amp;&amp;(expr=\"f.\"+search+\"(x,function(x){return \"+expr+\";})\"),negate&amp;&amp;(expr=\"!\"+expr),expr},Collection._compileSort=function(spec){var keys=[],asc=[];if(spec instanceof Array)for(var i=0;i&lt;spec.length;i++)typeof spec[i]==\"string\"?(keys.push(spec[i]),asc.push(!0)):(keys.push(spec[i][0]),asc.push(spec[i][1]!==\"desc\"));else{if(typeof spec!=\"object\")throw Error(\"Bad sort specification: \",JSON.stringify(spec));for(key in spec)keys.push(key),asc.push(!(spec[key]&lt;0))}if(keys.length===0)return function(){return 0};var _func,code=\"_func = (function(c){return function(a,b){var x;\";for(var i=0;i&lt;keys.length;i++)i!==0&amp;&amp;(code+=\"if(x!==0)return x;\"),code+=\"x=\"+(asc[i]?\"\":\"-\")+\"c(a[\"+JSON.stringify(keys[i])+\"],b[\"+JSON.stringify(keys[i])+\"]);\";return code+=\"return x;};})\",eval(code),_func(Collection._f._cmp)};var Utils={};Utils._deepcopy=function(v){if(typeof v!=\"object\")return v;if(v===null)return null;if(utils.isArray(v)){var ret=v.slice(0);for(var i=0;i&lt;v.length;i++)ret[i]=Utils._deepcopy(ret[i]);return ret}var ret={};for(var key in v)ret[key]=Utils._deepcopy(v[key]);return ret},Utils.each=Utils.forEach=function(obj,iterator,context){if(obj===null)return;var nativeForEach=Array.prototype.forEach;if(nativeForEach&amp;&amp;obj.forEach===nativeForEach)obj.forEach(iterator,context);else if(obj.length===+obj.length){for(var i=0,l=obj.length;i&lt;l;i++)if(iterator.call(context,obj[i],i,obj)===breaker)return}else for(var key in obj)if(_.has(obj,key)&amp;&amp;iterator.call(context,obj[key],key,obj)===breaker)return},Utils.isArray=Array.isArray||function(obj){return toString.call(obj)==\"[object Array]\"},Utils.debug=function(data){};var utils=Utils;"];
